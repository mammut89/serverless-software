{"version":3,"sources":["node_modules/react/lib/ReactUpdateQueue.js"],"names":["ReactCurrentOwner","require","ReactElement","ReactInstanceMap","ReactUpdates","assign","invariant","warning","enqueueUpdate","internalInstance","getInternalInstanceReadyForUpdate","publicInstance","callerName","get","process","env","NODE_ENV","constructor","displayName","undefined","current","ReactUpdateQueue","isMounted","owner","_warnedAboutRefsInRender","getName","_renderedComponent","enqueueCallback","callback","_pendingCallbacks","push","enqueueCallbackInternal","enqueueForceUpdate","_pendingForceUpdate","enqueueReplaceState","completeState","_pendingStateQueue","_pendingReplaceState","enqueueSetState","partialState","queue","enqueueSetProps","partialProps","enqueueSetPropsInternal","topLevelWrapper","_topLevelWrapper","wrapElement","_pendingElement","_currentElement","element","props","cloneAndReplaceProps","enqueueReplaceProps","enqueueReplacePropsInternal","enqueueElementInternal","newElement","module","exports"],"mappings":"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","file":"ReactUpdateQueue.js","sourceRoot":"/Users/mo/serverless-software","sourcesContent":["/**\n * Copyright 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactUpdateQueue\n */\n\n'use strict';\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactElement = require('./ReactElement');\nvar ReactInstanceMap = require('./ReactInstanceMap');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar assign = require('./Object.assign');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nfunction enqueueUpdate(internalInstance) {\n  ReactUpdates.enqueueUpdate(internalInstance);\n}\n\nfunction getInternalInstanceReadyForUpdate(publicInstance, callerName) {\n  var internalInstance = ReactInstanceMap.get(publicInstance);\n  if (!internalInstance) {\n    if (process.env.NODE_ENV !== 'production') {\n      // Only warn when we have a callerName. Otherwise we should be silent.\n      // We're probably calling from enqueueCallback. We don't want to warn\n      // there because we already warned for the corresponding lifecycle method.\n      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;\n    }\n    return null;\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;\n  }\n\n  return internalInstance;\n}\n\n/**\n * ReactUpdateQueue allows for state updates to be scheduled into a later\n * reconciliation step.\n */\nvar ReactUpdateQueue = {\n\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function (publicInstance) {\n    if (process.env.NODE_ENV !== 'production') {\n      var owner = ReactCurrentOwner.current;\n      if (owner !== null) {\n        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;\n        owner._warnedAboutRefsInRender = true;\n      }\n    }\n    var internalInstance = ReactInstanceMap.get(publicInstance);\n    if (internalInstance) {\n      // During componentWillMount and render this will still be null but after\n      // that will always render to something. At least for now. So we can use\n      // this hack.\n      return !!internalInstance._renderedComponent;\n    } else {\n      return false;\n    }\n  },\n\n  /**\n   * Enqueue a callback that will be executed after all the pending updates\n   * have processed.\n   *\n   * @param {ReactClass} publicInstance The instance to use as `this` context.\n   * @param {?function} callback Called after state is updated.\n   * @internal\n   */\n  enqueueCallback: function (publicInstance, callback) {\n    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\\'t callable.') : invariant(false) : undefined;\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);\n\n    // Previously we would throw an error if we didn't have an internal\n    // instance. Since we want to make it a no-op instead, we mirror the same\n    // behavior we have in other enqueue* methods.\n    // We also need to ignore callbacks in componentWillMount. See\n    // enqueueUpdates.\n    if (!internalInstance) {\n      return null;\n    }\n\n    if (internalInstance._pendingCallbacks) {\n      internalInstance._pendingCallbacks.push(callback);\n    } else {\n      internalInstance._pendingCallbacks = [callback];\n    }\n    // TODO: The callback here is ignored when setState is called from\n    // componentWillMount. Either fix it or disallow doing so completely in\n    // favor of getInitialState. Alternatively, we can disallow\n    // componentWillMount during server-side rendering.\n    enqueueUpdate(internalInstance);\n  },\n\n  enqueueCallbackInternal: function (internalInstance, callback) {\n    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\\'t callable.') : invariant(false) : undefined;\n    if (internalInstance._pendingCallbacks) {\n      internalInstance._pendingCallbacks.push(callback);\n    } else {\n      internalInstance._pendingCallbacks = [callback];\n    }\n    enqueueUpdate(internalInstance);\n  },\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @internal\n   */\n  enqueueForceUpdate: function (publicInstance) {\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');\n\n    if (!internalInstance) {\n      return;\n    }\n\n    internalInstance._pendingForceUpdate = true;\n\n    enqueueUpdate(internalInstance);\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @internal\n   */\n  enqueueReplaceState: function (publicInstance, completeState) {\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');\n\n    if (!internalInstance) {\n      return;\n    }\n\n    internalInstance._pendingStateQueue = [completeState];\n    internalInstance._pendingReplaceState = true;\n\n    enqueueUpdate(internalInstance);\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @internal\n   */\n  enqueueSetState: function (publicInstance, partialState) {\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');\n\n    if (!internalInstance) {\n      return;\n    }\n\n    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);\n    queue.push(partialState);\n\n    enqueueUpdate(internalInstance);\n  },\n\n  /**\n   * Sets a subset of the props.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialProps Subset of the next props.\n   * @internal\n   */\n  enqueueSetProps: function (publicInstance, partialProps) {\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');\n    if (!internalInstance) {\n      return;\n    }\n    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);\n  },\n\n  enqueueSetPropsInternal: function (internalInstance, partialProps) {\n    var topLevelWrapper = internalInstance._topLevelWrapper;\n    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;\n\n    // Merge with the pending element if it exists, otherwise with existing\n    // element props.\n    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;\n    var element = wrapElement.props;\n    var props = assign({}, element.props, partialProps);\n    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));\n\n    enqueueUpdate(topLevelWrapper);\n  },\n\n  /**\n   * Replaces all of the props.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} props New props.\n   * @internal\n   */\n  enqueueReplaceProps: function (publicInstance, props) {\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');\n    if (!internalInstance) {\n      return;\n    }\n    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);\n  },\n\n  enqueueReplacePropsInternal: function (internalInstance, props) {\n    var topLevelWrapper = internalInstance._topLevelWrapper;\n    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;\n\n    // Merge with the pending element if it exists, otherwise with existing\n    // element props.\n    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;\n    var element = wrapElement.props;\n    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));\n\n    enqueueUpdate(topLevelWrapper);\n  },\n\n  enqueueElementInternal: function (internalInstance, newElement) {\n    internalInstance._pendingElement = newElement;\n    enqueueUpdate(internalInstance);\n  }\n\n};\n\nmodule.exports = ReactUpdateQueue;"]}