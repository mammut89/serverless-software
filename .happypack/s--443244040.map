{"version":3,"sources":["node_modules/react/lib/ReactDOMTextarea.js"],"names":["LinkedValueUtils","require","ReactDOMIDOperations","ReactUpdates","assign","invariant","warning","forceUpdateIfMounted","_rootNodeID","ReactDOMTextarea","updateWrapper","getNativeProps","inst","props","context","dangerouslySetInnerHTML","process","env","NODE_ENV","undefined","nativeProps","defaultValue","value","children","_wrapperState","initialValue","onChange","mountWrapper","checkPropTypes","_currentElement","_owner","Array","isArray","length","getValue","_handleChange","bind","updatePropertyByID","event","returnValue","executeOnChange","asap","module","exports"],"mappings":"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","file":"ReactDOMTextarea.js","sourceRoot":"/Users/mo/serverless-software","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMTextarea\n */\n\n'use strict';\n\nvar LinkedValueUtils = require('./LinkedValueUtils');\nvar ReactDOMIDOperations = require('./ReactDOMIDOperations');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar assign = require('./Object.assign');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nfunction forceUpdateIfMounted() {\n  if (this._rootNodeID) {\n    // DOM component is still mounted; update\n    ReactDOMTextarea.updateWrapper(this);\n  }\n}\n\n/**\n * Implements a <textarea> native component that allows setting `value`, and\n * `defaultValue`. This differs from the traditional DOM API because value is\n * usually set as PCDATA children.\n *\n * If `value` is not supplied (or null/undefined), user actions that affect the\n * value will trigger updates to the element.\n *\n * If `value` is supplied (and not null/undefined), the rendered element will\n * not trigger updates to the element. Instead, the `value` prop must change in\n * order for the rendered element to be updated.\n *\n * The rendered element will be initialized with an empty value, the prop\n * `defaultValue` if specified, or the children content (deprecated).\n */\nvar ReactDOMTextarea = {\n  getNativeProps: function (inst, props, context) {\n    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;\n\n    // Always set children to the same thing. In IE9, the selection range will\n    // get reset if `textContent` is mutated.\n    var nativeProps = assign({}, props, {\n      defaultValue: undefined,\n      value: undefined,\n      children: inst._wrapperState.initialValue,\n      onChange: inst._wrapperState.onChange\n    });\n\n    return nativeProps;\n  },\n\n  mountWrapper: function (inst, props) {\n    if (process.env.NODE_ENV !== 'production') {\n      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);\n    }\n\n    var defaultValue = props.defaultValue;\n    // TODO (yungsters): Remove support for children content in <textarea>.\n    var children = props.children;\n    if (children != null) {\n      if (process.env.NODE_ENV !== 'production') {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;\n      }\n      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;\n      if (Array.isArray(children)) {\n        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;\n        children = children[0];\n      }\n\n      defaultValue = '' + children;\n    }\n    if (defaultValue == null) {\n      defaultValue = '';\n    }\n    var value = LinkedValueUtils.getValue(props);\n\n    inst._wrapperState = {\n      // We save the initial value so that `ReactDOMComponent` doesn't update\n      // `textContent` (unnecessary since we update value).\n      // The initial value can be a boolean or object so that's why it's\n      // forced to be a string.\n      initialValue: '' + (value != null ? value : defaultValue),\n      onChange: _handleChange.bind(inst)\n    };\n  },\n\n  updateWrapper: function (inst) {\n    var props = inst._currentElement.props;\n    var value = LinkedValueUtils.getValue(props);\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);\n    }\n  }\n};\n\nfunction _handleChange(event) {\n  var props = this._currentElement.props;\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);\n  ReactUpdates.asap(forceUpdateIfMounted, this);\n  return returnValue;\n}\n\nmodule.exports = ReactDOMTextarea;"]}