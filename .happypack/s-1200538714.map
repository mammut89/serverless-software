{"version":3,"sources":["node_modules/react/lib/ReactServerRenderingTransaction.js"],"names":["PooledClass","require","CallbackQueue","Transaction","assign","emptyFunction","ON_DOM_READY_QUEUEING","initialize","reactMountReady","reset","close","TRANSACTION_WRAPPERS","ReactServerRenderingTransaction","renderToStaticMarkup","reinitializeTransaction","getPooled","useCreateElement","Mixin","getTransactionWrappers","getReactMountReady","destructor","release","prototype","addPoolingTo","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAYA;;AAEA,IAAIA,cAAcC,QAAQ,eAAR,CAAlB;AACA,IAAIC,gBAAgBD,QAAQ,iBAAR,CAApB;AACA,IAAIE,cAAcF,QAAQ,eAAR,CAAlB;;AAEA,IAAIG,SAASH,QAAQ,iBAAR,CAAb;AACA,IAAII,gBAAgBJ,QAAQ,wBAAR,CAApB;;AAEA;;;;AAIA,IAAIK,wBAAwB;AAC1B;;;AAGAC,cAAY,sBAAY;AACtB,SAAKC,eAAL,CAAqBC,KAArB;AACD,GANyB;;AAQ1BC,SAAOL;AARmB,CAA5B;;AAWA;;;;;AAKA,IAAIM,uBAAuB,CAACL,qBAAD,CAA3B;;AAEA;;;;AAIA,SAASM,+BAAT,CAAyCC,oBAAzC,EAA+D;AAC7D,OAAKC,uBAAL;AACA,OAAKD,oBAAL,GAA4BA,oBAA5B;AACA,OAAKL,eAAL,GAAuBN,cAAca,SAAd,CAAwB,IAAxB,CAAvB;AACA,OAAKC,gBAAL,GAAwB,KAAxB;AACD;;AAED,IAAIC,QAAQ;AACV;;;;;;AAMAC,0BAAwB,kCAAY;AAClC,WAAOP,oBAAP;AACD,GATS;;AAWV;;;AAGAQ,sBAAoB,8BAAY;AAC9B,WAAO,KAAKX,eAAZ;AACD,GAhBS;;AAkBV;;;;AAIAY,cAAY,sBAAY;AACtBlB,kBAAcmB,OAAd,CAAsB,KAAKb,eAA3B;AACA,SAAKA,eAAL,GAAuB,IAAvB;AACD;AAzBS,CAAZ;;AA4BAJ,OAAOQ,gCAAgCU,SAAvC,EAAkDnB,YAAYc,KAA9D,EAAqEA,KAArE;;AAEAjB,YAAYuB,YAAZ,CAAyBX,+BAAzB;;AAEAY,OAAOC,OAAP,GAAiBb,+BAAjB","file":"ReactServerRenderingTransaction.js","sourceRoot":"/Users/mo/serverless-software","sourcesContent":["/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactServerRenderingTransaction\n * @typechecks\n */\n\n'use strict';\n\nvar PooledClass = require('./PooledClass');\nvar CallbackQueue = require('./CallbackQueue');\nvar Transaction = require('./Transaction');\n\nvar assign = require('./Object.assign');\nvar emptyFunction = require('fbjs/lib/emptyFunction');\n\n/**\n * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks\n * during the performing of the transaction.\n */\nvar ON_DOM_READY_QUEUEING = {\n  /**\n   * Initializes the internal `onDOMReady` queue.\n   */\n  initialize: function () {\n    this.reactMountReady.reset();\n  },\n\n  close: emptyFunction\n};\n\n/**\n * Executed within the scope of the `Transaction` instance. Consider these as\n * being member methods, but with an implied ordering while being isolated from\n * each other.\n */\nvar TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];\n\n/**\n * @class ReactServerRenderingTransaction\n * @param {boolean} renderToStaticMarkup\n */\nfunction ReactServerRenderingTransaction(renderToStaticMarkup) {\n  this.reinitializeTransaction();\n  this.renderToStaticMarkup = renderToStaticMarkup;\n  this.reactMountReady = CallbackQueue.getPooled(null);\n  this.useCreateElement = false;\n}\n\nvar Mixin = {\n  /**\n   * @see Transaction\n   * @abstract\n   * @final\n   * @return {array} Empty list of operation wrap procedures.\n   */\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  /**\n   * @return {object} The queue to collect `onDOMReady` callbacks with.\n   */\n  getReactMountReady: function () {\n    return this.reactMountReady;\n  },\n\n  /**\n   * `PooledClass` looks for this, and will invoke this before allowing this\n   * instance to be reused.\n   */\n  destructor: function () {\n    CallbackQueue.release(this.reactMountReady);\n    this.reactMountReady = null;\n  }\n};\n\nassign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);\n\nPooledClass.addPoolingTo(ReactServerRenderingTransaction);\n\nmodule.exports = ReactServerRenderingTransaction;"]}