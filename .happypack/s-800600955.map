{"version":3,"sources":["node_modules/deep-equal/index.js"],"names":["pSlice","Array","prototype","slice","objectKeys","require","isArguments","deepEqual","module","exports","actual","expected","opts","Date","getTime","strict","objEquiv","isUndefinedOrNull","value","undefined","isBuffer","x","length","copy","a","b","i","key","call","ka","kb","e","sort"],"mappings":"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","file":"index.js","sourceRoot":"/Users/mo/serverless-software","sourcesContent":["var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n"]}