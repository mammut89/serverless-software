{"version":3,"sources":["node_modules/react-router/lib/computeChangedRoutes.js"],"names":["exports","__esModule","_PatternUtils","require","routeParamsChanged","route","prevState","nextState","path","paramNames","getParamNames","some","paramName","params","computeChangedRoutes","prevRoutes","routes","nextRoutes","leaveRoutes","changeRoutes","enterRoutes","parentIsLeaving","filter","isLeaving","indexOf","reverse","forEach","isNew","paramsChanged","push","default","module"],"mappings":"AAAA;;AAEAA,QAAQC,UAAR,GAAqB,IAArB;;AAEA,IAAIC,gBAAgBC,QAAQ,gBAAR,CAApB;;AAEA,SAASC,kBAAT,CAA4BC,KAA5B,EAAmCC,SAAnC,EAA8CC,SAA9C,EAAyD;AACvD,MAAI,CAACF,MAAMG,IAAX,EAAiB,OAAO,KAAP;;AAEjB,MAAIC,aAAa,CAAC,GAAGP,cAAcQ,aAAlB,EAAiCL,MAAMG,IAAvC,CAAjB;;AAEA,SAAOC,WAAWE,IAAX,CAAgB,UAAUC,SAAV,EAAqB;AAC1C,WAAON,UAAUO,MAAV,CAAiBD,SAAjB,MAAgCL,UAAUM,MAAV,CAAiBD,SAAjB,CAAvC;AACD,GAFM,CAAP;AAGD;;AAED;;;;;;;;;;;;;AAaA,SAASE,oBAAT,CAA8BR,SAA9B,EAAyCC,SAAzC,EAAoD;AAClD,MAAIQ,aAAaT,aAAaA,UAAUU,MAAxC;AACA,MAAIC,aAAaV,UAAUS,MAA3B;;AAEA,MAAIE,cAAc,KAAK,CAAvB;AAAA,MACIC,eAAe,KAAK,CADxB;AAAA,MAEIC,cAAc,KAAK,CAFvB;AAGA,MAAIL,UAAJ,EAAgB;AACd,KAAC,YAAY;AACX,UAAIM,kBAAkB,KAAtB;AACAH,oBAAcH,WAAWO,MAAX,CAAkB,UAAUjB,KAAV,EAAiB;AAC/C,YAAIgB,eAAJ,EAAqB;AACnB,iBAAO,IAAP;AACD,SAFD,MAEO;AACL,cAAIE,YAAYN,WAAWO,OAAX,CAAmBnB,KAAnB,MAA8B,CAAC,CAA/B,IAAoCD,mBAAmBC,KAAnB,EAA0BC,SAA1B,EAAqCC,SAArC,CAApD;AACA,cAAIgB,SAAJ,EAAeF,kBAAkB,IAAlB;AACf,iBAAOE,SAAP;AACD;AACF,OARa,CAAd;;AAUA;AACAL,kBAAYO,OAAZ;;AAEAL,oBAAc,EAAd;AACAD,qBAAe,EAAf;;AAEAF,iBAAWS,OAAX,CAAmB,UAAUrB,KAAV,EAAiB;AAClC,YAAIsB,QAAQZ,WAAWS,OAAX,CAAmBnB,KAAnB,MAA8B,CAAC,CAA3C;AACA,YAAIuB,gBAAgBV,YAAYM,OAAZ,CAAoBnB,KAApB,MAA+B,CAAC,CAApD;;AAEA,YAAIsB,SAASC,aAAb,EAA4BR,YAAYS,IAAZ,CAAiBxB,KAAjB,EAA5B,KAAyDc,aAAaU,IAAb,CAAkBxB,KAAlB;AAC1D,OALD;AAMD,KAxBD;AAyBD,GA1BD,MA0BO;AACLa,kBAAc,EAAd;AACAC,mBAAe,EAAf;AACAC,kBAAcH,UAAd;AACD;;AAED,SAAO;AACLC,iBAAaA,WADR;AAELC,kBAAcA,YAFT;AAGLC,iBAAaA;AAHR,GAAP;AAKD;;AAEDpB,QAAQ8B,OAAR,GAAkBhB,oBAAlB;AACAiB,OAAO/B,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"computeChangedRoutes.js","sourceRoot":"/Users/mo/serverless-software","sourcesContent":["'use strict';\n\nexports.__esModule = true;\n\nvar _PatternUtils = require('./PatternUtils');\n\nfunction routeParamsChanged(route, prevState, nextState) {\n  if (!route.path) return false;\n\n  var paramNames = (0, _PatternUtils.getParamNames)(route.path);\n\n  return paramNames.some(function (paramName) {\n    return prevState.params[paramName] !== nextState.params[paramName];\n  });\n}\n\n/**\n * Returns an object of { leaveRoutes, changeRoutes, enterRoutes } determined by\n * the change from prevState to nextState. We leave routes if either\n * 1) they are not in the next state or 2) they are in the next state\n * but their params have changed (i.e. /users/123 => /users/456).\n *\n * leaveRoutes are ordered starting at the leaf route of the tree\n * we're leaving up to the common parent route. enterRoutes are ordered\n * from the top of the tree we're entering down to the leaf route.\n *\n * changeRoutes are any routes that didn't leave or enter during\n * the transition.\n */\nfunction computeChangedRoutes(prevState, nextState) {\n  var prevRoutes = prevState && prevState.routes;\n  var nextRoutes = nextState.routes;\n\n  var leaveRoutes = void 0,\n      changeRoutes = void 0,\n      enterRoutes = void 0;\n  if (prevRoutes) {\n    (function () {\n      var parentIsLeaving = false;\n      leaveRoutes = prevRoutes.filter(function (route) {\n        if (parentIsLeaving) {\n          return true;\n        } else {\n          var isLeaving = nextRoutes.indexOf(route) === -1 || routeParamsChanged(route, prevState, nextState);\n          if (isLeaving) parentIsLeaving = true;\n          return isLeaving;\n        }\n      });\n\n      // onLeave hooks start at the leaf route.\n      leaveRoutes.reverse();\n\n      enterRoutes = [];\n      changeRoutes = [];\n\n      nextRoutes.forEach(function (route) {\n        var isNew = prevRoutes.indexOf(route) === -1;\n        var paramsChanged = leaveRoutes.indexOf(route) !== -1;\n\n        if (isNew || paramsChanged) enterRoutes.push(route);else changeRoutes.push(route);\n      });\n    })();\n  } else {\n    leaveRoutes = [];\n    changeRoutes = [];\n    enterRoutes = nextRoutes;\n  }\n\n  return {\n    leaveRoutes: leaveRoutes,\n    changeRoutes: changeRoutes,\n    enterRoutes: enterRoutes\n  };\n}\n\nexports.default = computeChangedRoutes;\nmodule.exports = exports['default'];"]}