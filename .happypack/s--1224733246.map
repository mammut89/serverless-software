{"version":3,"sources":["node_modules/react/lib/Danger.js"],"names":["ExecutionEnvironment","require","createNodesFromMarkup","emptyFunction","getMarkupWrap","invariant","OPEN_TAG_NAME_EXP","RESULT_INDEX_ATTR","getNodeName","markup","substring","indexOf","Danger","dangerouslyRenderMarkup","markupList","canUseDOM","process","env","NODE_ENV","undefined","nodeName","markupByNodeName","i","length","resultList","resultListAssignmentCount","hasOwnProperty","markupListByNodeName","resultIndex","replace","renderNodes","join","j","renderNode","hasAttribute","getAttribute","removeAttribute","console","error","dangerouslyReplaceNodeWithMarkup","oldChild","tagName","toLowerCase","newChild","parentNode","replaceChild","module","exports"],"mappings":"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","file":"Danger.js","sourceRoot":"/Users/mo/serverless-software","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Danger\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar getMarkupWrap = require('fbjs/lib/getMarkupWrap');\nvar invariant = require('fbjs/lib/invariant');\n\nvar OPEN_TAG_NAME_EXP = /^(<[^ \\/>]+)/;\nvar RESULT_INDEX_ATTR = 'data-danger-index';\n\n/**\n * Extracts the `nodeName` from a string of markup.\n *\n * NOTE: Extracting the `nodeName` does not require a regular expression match\n * because we make assumptions about React-generated markup (i.e. there are no\n * spaces surrounding the opening tag and there is at least one attribute).\n *\n * @param {string} markup String of markup.\n * @return {string} Node name of the supplied markup.\n * @see http://jsperf.com/extract-nodename\n */\nfunction getNodeName(markup) {\n  return markup.substring(1, markup.indexOf(' '));\n}\n\nvar Danger = {\n\n  /**\n   * Renders markup into an array of nodes. The markup is expected to render\n   * into a list of root nodes. Also, the length of `resultList` and\n   * `markupList` should be the same.\n   *\n   * @param {array<string>} markupList List of markup strings to render.\n   * @return {array<DOMElement>} List of rendered nodes.\n   * @internal\n   */\n  dangerouslyRenderMarkup: function (markupList) {\n    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;\n    var nodeName;\n    var markupByNodeName = {};\n    // Group markup by `nodeName` if a wrap is necessary, else by '*'.\n    for (var i = 0; i < markupList.length; i++) {\n      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;\n      nodeName = getNodeName(markupList[i]);\n      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';\n      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];\n      markupByNodeName[nodeName][i] = markupList[i];\n    }\n    var resultList = [];\n    var resultListAssignmentCount = 0;\n    for (nodeName in markupByNodeName) {\n      if (!markupByNodeName.hasOwnProperty(nodeName)) {\n        continue;\n      }\n      var markupListByNodeName = markupByNodeName[nodeName];\n\n      // This for-in loop skips the holes of the sparse array. The order of\n      // iteration should follow the order of assignment, which happens to match\n      // numerical index order, but we don't rely on that.\n      var resultIndex;\n      for (resultIndex in markupListByNodeName) {\n        if (markupListByNodeName.hasOwnProperty(resultIndex)) {\n          var markup = markupListByNodeName[resultIndex];\n\n          // Push the requested markup with an additional RESULT_INDEX_ATTR\n          // attribute.  If the markup does not start with a < character, it\n          // will be discarded below (with an appropriate console.error).\n          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,\n          // This index will be parsed back out below.\n          '$1 ' + RESULT_INDEX_ATTR + '=\"' + resultIndex + '\" ');\n        }\n      }\n\n      // Render each group of markup with similar wrapping `nodeName`.\n      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.\n      );\n\n      for (var j = 0; j < renderNodes.length; ++j) {\n        var renderNode = renderNodes[j];\n        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {\n\n          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);\n          renderNode.removeAttribute(RESULT_INDEX_ATTR);\n\n          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;\n\n          resultList[resultIndex] = renderNode;\n\n          // This should match resultList.length and markupList.length when\n          // we're done.\n          resultListAssignmentCount += 1;\n        } else if (process.env.NODE_ENV !== 'production') {\n          console.error('Danger: Discarding unexpected node:', renderNode);\n        }\n      }\n    }\n\n    // Although resultList was populated out of order, it should now be a dense\n    // array.\n    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;\n\n    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;\n\n    return resultList;\n  },\n\n  /**\n   * Replaces a node with a string of markup at its current position within its\n   * parent. The markup must render into a single root node.\n   *\n   * @param {DOMElement} oldChild Child node to replace.\n   * @param {string} markup Markup to render in place of the child node.\n   * @internal\n   */\n  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {\n    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;\n    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;\n    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;\n\n    var newChild;\n    if (typeof markup === 'string') {\n      newChild = createNodesFromMarkup(markup, emptyFunction)[0];\n    } else {\n      newChild = markup;\n    }\n    oldChild.parentNode.replaceChild(newChild, oldChild);\n  }\n\n};\n\nmodule.exports = Danger;"]}