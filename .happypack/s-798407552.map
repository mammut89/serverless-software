{"version":3,"sources":["node_modules/react/lib/setInnerHTML.js"],"names":["ExecutionEnvironment","require","WHITESPACE_TEST","NONVISIBLE_TEST","setInnerHTML","node","html","innerHTML","MSApp","execUnsafeLocalFunction","canUseDOM","testElement","document","createElement","parentNode","replaceChild","test","String","fromCharCode","textNode","firstChild","data","length","removeChild","deleteData","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAWA;;AAEA;;AAEA,IAAIA,uBAAuBC,QAAQ,+BAAR,CAA3B;;AAEA,IAAIC,kBAAkB,cAAtB;AACA,IAAIC,kBAAkB,sDAAtB;;AAEA;;;;;;;;AAQA,IAAIC,eAAe,sBAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AACvCD,OAAKE,SAAL,GAAiBD,IAAjB;AACD,CAFD;;AAIA;AACA,IAAI,OAAOE,KAAP,KAAiB,WAAjB,IAAgCA,MAAMC,uBAA1C,EAAmE;AACjEL,iBAAe,sBAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AACnCE,UAAMC,uBAAN,CAA8B,YAAY;AACxCJ,WAAKE,SAAL,GAAiBD,IAAjB;AACD,KAFD;AAGD,GAJD;AAKD;;AAED,IAAIN,qBAAqBU,SAAzB,EAAoC;AAClC;AACA;AACA;AACA;;AAEA;AACA,MAAIC,cAAcC,SAASC,aAAT,CAAuB,KAAvB,CAAlB;AACAF,cAAYJ,SAAZ,GAAwB,GAAxB;AACA,MAAII,YAAYJ,SAAZ,KAA0B,EAA9B,EAAkC;AAChCH,mBAAe,sBAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AACnC;AACA;AACA;AACA;AACA;AACA,UAAID,KAAKS,UAAT,EAAqB;AACnBT,aAAKS,UAAL,CAAgBC,YAAhB,CAA6BV,IAA7B,EAAmCA,IAAnC;AACD;;AAED;AACA;AACA;AACA;AACA,UAAIH,gBAAgBc,IAAhB,CAAqBV,IAArB,KAA8BA,KAAK,CAAL,MAAY,GAAZ,IAAmBH,gBAAgBa,IAAhB,CAAqBV,IAArB,CAArD,EAAiF;AAC/E;AACA;AACA;AACA;AACA;AACA;AACAD,aAAKE,SAAL,GAAiBU,OAAOC,YAAP,CAAoB,MAApB,IAA8BZ,IAA/C;;AAEA;AACA;AACA,YAAIa,WAAWd,KAAKe,UAApB;AACA,YAAID,SAASE,IAAT,CAAcC,MAAd,KAAyB,CAA7B,EAAgC;AAC9BjB,eAAKkB,WAAL,CAAiBJ,QAAjB;AACD,SAFD,MAEO;AACLA,mBAASK,UAAT,CAAoB,CAApB,EAAuB,CAAvB;AACD;AACF,OAjBD,MAiBO;AACLnB,aAAKE,SAAL,GAAiBD,IAAjB;AACD;AACF,KAlCD;AAmCD;AACF;;AAEDmB,OAAOC,OAAP,GAAiBtB,YAAjB","file":"setInnerHTML.js","sourceRoot":"/Users/mo/serverless-software","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule setInnerHTML\n */\n\n/* globals MSApp */\n\n'use strict';\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar WHITESPACE_TEST = /^[ \\r\\n\\t\\f]/;\nvar NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \\r\\n\\t\\f\\/>]/;\n\n/**\n * Set the innerHTML property of a node, ensuring that whitespace is preserved\n * even in IE8.\n *\n * @param {DOMElement} node\n * @param {string} html\n * @internal\n */\nvar setInnerHTML = function (node, html) {\n  node.innerHTML = html;\n};\n\n// Win8 apps: Allow all html to be inserted\nif (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {\n  setInnerHTML = function (node, html) {\n    MSApp.execUnsafeLocalFunction(function () {\n      node.innerHTML = html;\n    });\n  };\n}\n\nif (ExecutionEnvironment.canUseDOM) {\n  // IE8: When updating a just created node with innerHTML only leading\n  // whitespace is removed. When updating an existing node with innerHTML\n  // whitespace in root TextNodes is also collapsed.\n  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html\n\n  // Feature detection; only IE8 is known to behave improperly like this.\n  var testElement = document.createElement('div');\n  testElement.innerHTML = ' ';\n  if (testElement.innerHTML === '') {\n    setInnerHTML = function (node, html) {\n      // Magic theory: IE8 supposedly differentiates between added and updated\n      // nodes when processing innerHTML, innerHTML on updated nodes suffers\n      // from worse whitespace behavior. Re-adding a node like this triggers\n      // the initial and more favorable whitespace behavior.\n      // TODO: What to do on a detached node?\n      if (node.parentNode) {\n        node.parentNode.replaceChild(node, node);\n      }\n\n      // We also implement a workaround for non-visible tags disappearing into\n      // thin air on IE8, this only happens if there is no visible text\n      // in-front of the non-visible tags. Piggyback on the whitespace fix\n      // and simply check if any non-visible tags appear in the source.\n      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {\n        // Recover leading whitespace by temporarily prepending any character.\n        // \\uFEFF has the potential advantage of being zero-width/invisible.\n        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode\n        // in hopes that this is preserved even if \"\\uFEFF\" is transformed to\n        // the actual Unicode character (by Babel, for example).\n        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216\n        node.innerHTML = String.fromCharCode(0xFEFF) + html;\n\n        // deleteData leaves an empty `TextNode` which offsets the index of all\n        // children. Definitely want to avoid this.\n        var textNode = node.firstChild;\n        if (textNode.data.length === 1) {\n          node.removeChild(textNode);\n        } else {\n          textNode.deleteData(0, 1);\n        }\n      } else {\n        node.innerHTML = html;\n      }\n    };\n  }\n}\n\nmodule.exports = setInnerHTML;"]}