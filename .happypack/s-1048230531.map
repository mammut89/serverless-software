{"version":3,"sources":["node_modules/react/lib/dangerousStyleValue.js"],"names":["CSSProperty","require","isUnitlessNumber","dangerousStyleValue","name","value","isEmpty","isNonNumeric","isNaN","hasOwnProperty","trim","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAYA;;AAEA,IAAIA,cAAcC,QAAQ,eAAR,CAAlB;;AAEA,IAAIC,mBAAmBF,YAAYE,gBAAnC;;AAEA;;;;;;;;;AASA,SAASC,mBAAT,CAA6BC,IAA7B,EAAmCC,KAAnC,EAA0C;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIC,UAAUD,SAAS,IAAT,IAAiB,OAAOA,KAAP,KAAiB,SAAlC,IAA+CA,UAAU,EAAvE;AACA,MAAIC,OAAJ,EAAa;AACX,WAAO,EAAP;AACD;;AAED,MAAIC,eAAeC,MAAMH,KAAN,CAAnB;AACA,MAAIE,gBAAgBF,UAAU,CAA1B,IAA+BH,iBAAiBO,cAAjB,CAAgCL,IAAhC,KAAyCF,iBAAiBE,IAAjB,CAA5E,EAAoG;AAClG,WAAO,KAAKC,KAAZ,CADkG,CAC/E;AACpB;;AAED,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7BA,YAAQA,MAAMK,IAAN,EAAR;AACD;AACD,SAAOL,QAAQ,IAAf;AACD;;AAEDM,OAAOC,OAAP,GAAiBT,mBAAjB","file":"dangerousStyleValue.js","sourceRoot":"/Users/mo/serverless-software","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule dangerousStyleValue\n * @typechecks static-only\n */\n\n'use strict';\n\nvar CSSProperty = require('./CSSProperty');\n\nvar isUnitlessNumber = CSSProperty.isUnitlessNumber;\n\n/**\n * Convert a value into the proper css writable value. The style name `name`\n * should be logical (no hyphens), as specified\n * in `CSSProperty.isUnitlessNumber`.\n *\n * @param {string} name CSS property name such as `topMargin`.\n * @param {*} value CSS property value such as `10px`.\n * @return {string} Normalized style value with dimensions applied.\n */\nfunction dangerousStyleValue(name, value) {\n  // Note that we've removed escapeTextForBrowser() calls here since the\n  // whole string will be escaped when the attribute is injected into\n  // the markup. If you provide unsafe user data here they can inject\n  // arbitrary CSS which may be problematic (I couldn't repro this):\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\n  // This is not an XSS hole but instead a potential CSS injection issue\n  // which has lead to a greater discussion about how we're going to\n  // trust URLs moving forward. See #2115901\n\n  var isEmpty = value == null || typeof value === 'boolean' || value === '';\n  if (isEmpty) {\n    return '';\n  }\n\n  var isNonNumeric = isNaN(value);\n  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {\n    return '' + value; // cast to string\n  }\n\n  if (typeof value === 'string') {\n    value = value.trim();\n  }\n  return value + 'px';\n}\n\nmodule.exports = dangerousStyleValue;"]}