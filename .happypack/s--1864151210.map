{"version":3,"sources":["node_modules/react/lib/ReactInstanceHandles.js"],"names":["ReactRootIndex","require","invariant","SEPARATOR","SEPARATOR_LENGTH","length","MAX_TREE_DEPTH","getReactRootIDString","index","toString","isBoundary","id","charAt","isValidID","isAncestorIDOf","ancestorID","descendantID","indexOf","getParentID","substr","lastIndexOf","getNextDescendantID","destinationID","process","env","NODE_ENV","undefined","start","i","getFirstCommonAncestorID","oneID","twoID","minLength","Math","min","lastCommonMarkerIndex","longestCommonID","traverseParentPath","stop","cb","arg","skipFirst","skipLast","traverseUp","depth","traverse","ret","ReactInstanceHandles","createReactRootID","createReactRootIndex","createReactID","rootID","name","getReactRootIDFromNodeID","traverseEnterLeave","leaveID","enterID","upArg","downArg","traverseTwoPhase","targetID","traverseTwoPhaseSkipTarget","traverseAncestors","_getNextDescendantID","module","exports"],"mappings":"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","file":"ReactInstanceHandles.js","sourceRoot":"/Users/mo/serverless-software","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactInstanceHandles\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactRootIndex = require('./ReactRootIndex');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar SEPARATOR = '.';\nvar SEPARATOR_LENGTH = SEPARATOR.length;\n\n/**\n * Maximum depth of traversals before we consider the possibility of a bad ID.\n */\nvar MAX_TREE_DEPTH = 10000;\n\n/**\n * Creates a DOM ID prefix to use when mounting React components.\n *\n * @param {number} index A unique integer\n * @return {string} React root ID.\n * @internal\n */\nfunction getReactRootIDString(index) {\n  return SEPARATOR + index.toString(36);\n}\n\n/**\n * Checks if a character in the supplied ID is a separator or the end.\n *\n * @param {string} id A React DOM ID.\n * @param {number} index Index of the character to check.\n * @return {boolean} True if the character is a separator or end of the ID.\n * @private\n */\nfunction isBoundary(id, index) {\n  return id.charAt(index) === SEPARATOR || index === id.length;\n}\n\n/**\n * Checks if the supplied string is a valid React DOM ID.\n *\n * @param {string} id A React DOM ID, maybe.\n * @return {boolean} True if the string is a valid React DOM ID.\n * @private\n */\nfunction isValidID(id) {\n  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;\n}\n\n/**\n * Checks if the first ID is an ancestor of or equal to the second ID.\n *\n * @param {string} ancestorID\n * @param {string} descendantID\n * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.\n * @internal\n */\nfunction isAncestorIDOf(ancestorID, descendantID) {\n  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);\n}\n\n/**\n * Gets the parent ID of the supplied React DOM ID, `id`.\n *\n * @param {string} id ID of a component.\n * @return {string} ID of the parent, or an empty string.\n * @private\n */\nfunction getParentID(id) {\n  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';\n}\n\n/**\n * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the\n * supplied `destinationID`. If they are equal, the ID is returned.\n *\n * @param {string} ancestorID ID of an ancestor node of `destinationID`.\n * @param {string} destinationID ID of the destination node.\n * @return {string} Next ID on the path from `ancestorID` to `destinationID`.\n * @private\n */\nfunction getNextDescendantID(ancestorID, destinationID) {\n  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;\n  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;\n  if (ancestorID === destinationID) {\n    return ancestorID;\n  }\n  // Skip over the ancestor and the immediate separator. Traverse until we hit\n  // another separator or we reach the end of `destinationID`.\n  var start = ancestorID.length + SEPARATOR_LENGTH;\n  var i;\n  for (i = start; i < destinationID.length; i++) {\n    if (isBoundary(destinationID, i)) {\n      break;\n    }\n  }\n  return destinationID.substr(0, i);\n}\n\n/**\n * Gets the nearest common ancestor ID of two IDs.\n *\n * Using this ID scheme, the nearest common ancestor ID is the longest common\n * prefix of the two IDs that immediately preceded a \"marker\" in both strings.\n *\n * @param {string} oneID\n * @param {string} twoID\n * @return {string} Nearest common ancestor ID, or the empty string if none.\n * @private\n */\nfunction getFirstCommonAncestorID(oneID, twoID) {\n  var minLength = Math.min(oneID.length, twoID.length);\n  if (minLength === 0) {\n    return '';\n  }\n  var lastCommonMarkerIndex = 0;\n  // Use `<=` to traverse until the \"EOL\" of the shorter string.\n  for (var i = 0; i <= minLength; i++) {\n    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {\n      lastCommonMarkerIndex = i;\n    } else if (oneID.charAt(i) !== twoID.charAt(i)) {\n      break;\n    }\n  }\n  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);\n  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;\n  return longestCommonID;\n}\n\n/**\n * Traverses the parent path between two IDs (either up or down). The IDs must\n * not be the same, and there must exist a parent path between them. If the\n * callback returns `false`, traversal is stopped.\n *\n * @param {?string} start ID at which to start traversal.\n * @param {?string} stop ID at which to end traversal.\n * @param {function} cb Callback to invoke each ID with.\n * @param {*} arg Argument to invoke the callback with.\n * @param {?boolean} skipFirst Whether or not to skip the first node.\n * @param {?boolean} skipLast Whether or not to skip the last node.\n * @private\n */\nfunction traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {\n  start = start || '';\n  stop = stop || '';\n  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;\n  var traverseUp = isAncestorIDOf(stop, start);\n  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;\n  // Traverse from `start` to `stop` one depth at a time.\n  var depth = 0;\n  var traverse = traverseUp ? getParentID : getNextDescendantID;\n  for (var id = start;; /* until break */id = traverse(id, stop)) {\n    var ret;\n    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {\n      ret = cb(id, traverseUp, arg);\n    }\n    if (ret === false || id === stop) {\n      // Only break //after// visiting `stop`.\n      break;\n    }\n    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;\n  }\n}\n\n/**\n * Manages the IDs assigned to DOM representations of React components. This\n * uses a specific scheme in order to traverse the DOM efficiently (e.g. in\n * order to simulate events).\n *\n * @internal\n */\nvar ReactInstanceHandles = {\n\n  /**\n   * Constructs a React root ID\n   * @return {string} A React root ID.\n   */\n  createReactRootID: function () {\n    return getReactRootIDString(ReactRootIndex.createReactRootIndex());\n  },\n\n  /**\n   * Constructs a React ID by joining a root ID with a name.\n   *\n   * @param {string} rootID Root ID of a parent component.\n   * @param {string} name A component's name (as flattened children).\n   * @return {string} A React ID.\n   * @internal\n   */\n  createReactID: function (rootID, name) {\n    return rootID + name;\n  },\n\n  /**\n   * Gets the DOM ID of the React component that is the root of the tree that\n   * contains the React component with the supplied DOM ID.\n   *\n   * @param {string} id DOM ID of a React component.\n   * @return {?string} DOM ID of the React component that is the root.\n   * @internal\n   */\n  getReactRootIDFromNodeID: function (id) {\n    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {\n      var index = id.indexOf(SEPARATOR, 1);\n      return index > -1 ? id.substr(0, index) : id;\n    }\n    return null;\n  },\n\n  /**\n   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that\n   * should would receive a `mouseEnter` or `mouseLeave` event.\n   *\n   * NOTE: Does not invoke the callback on the nearest common ancestor because\n   * nothing \"entered\" or \"left\" that element.\n   *\n   * @param {string} leaveID ID being left.\n   * @param {string} enterID ID being entered.\n   * @param {function} cb Callback to invoke on each entered/left ID.\n   * @param {*} upArg Argument to invoke the callback with on left IDs.\n   * @param {*} downArg Argument to invoke the callback with on entered IDs.\n   * @internal\n   */\n  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {\n    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);\n    if (ancestorID !== leaveID) {\n      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);\n    }\n    if (ancestorID !== enterID) {\n      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);\n    }\n  },\n\n  /**\n   * Simulates the traversal of a two-phase, capture/bubble event dispatch.\n   *\n   * NOTE: This traversal happens on IDs without touching the DOM.\n   *\n   * @param {string} targetID ID of the target node.\n   * @param {function} cb Callback to invoke.\n   * @param {*} arg Argument to invoke the callback with.\n   * @internal\n   */\n  traverseTwoPhase: function (targetID, cb, arg) {\n    if (targetID) {\n      traverseParentPath('', targetID, cb, arg, true, false);\n      traverseParentPath(targetID, '', cb, arg, false, true);\n    }\n  },\n\n  /**\n   * Same as `traverseTwoPhase` but skips the `targetID`.\n   */\n  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {\n    if (targetID) {\n      traverseParentPath('', targetID, cb, arg, true, true);\n      traverseParentPath(targetID, '', cb, arg, true, true);\n    }\n  },\n\n  /**\n   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For\n   * example, passing `.0.$row-0.1` would result in `cb` getting called\n   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.\n   *\n   * NOTE: This traversal happens on IDs without touching the DOM.\n   *\n   * @param {string} targetID ID of the target node.\n   * @param {function} cb Callback to invoke.\n   * @param {*} arg Argument to invoke the callback with.\n   * @internal\n   */\n  traverseAncestors: function (targetID, cb, arg) {\n    traverseParentPath('', targetID, cb, arg, true, false);\n  },\n\n  getFirstCommonAncestorID: getFirstCommonAncestorID,\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _getNextDescendantID: getNextDescendantID,\n\n  isAncestorIDOf: isAncestorIDOf,\n\n  SEPARATOR: SEPARATOR\n\n};\n\nmodule.exports = ReactInstanceHandles;"]}