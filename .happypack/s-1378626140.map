{"version":3,"sources":["node_modules/fbjs/lib/warning.js"],"names":["emptyFunction","require","warning","process","env","NODE_ENV","condition","format","_len","arguments","length","args","Array","_key","undefined","Error","indexOf","argIndex","message","replace","console","error","x","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAWA;;AAEA,IAAIA,gBAAgBC,QAAQ,iBAAR,CAApB;;AAEA;;;;;;;AAOA,IAAIC,UAAUF,aAAd;;AAEA,IAAIG,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCH,YAAU,iBAAUI,SAAV,EAAqBC,MAArB,EAA6B;AACrC,SAAK,IAAIC,OAAOC,UAAUC,MAArB,EAA6BC,OAAOC,MAAMJ,OAAO,CAAP,GAAWA,OAAO,CAAlB,GAAsB,CAA5B,CAApC,EAAoEK,OAAO,CAAhF,EAAmFA,OAAOL,IAA1F,EAAgGK,MAAhG,EAAwG;AACtGF,WAAKE,OAAO,CAAZ,IAAiBJ,UAAUI,IAAV,CAAjB;AACD;;AAED,QAAIN,WAAWO,SAAf,EAA0B;AACxB,YAAM,IAAIC,KAAJ,CAAU,8DAA8D,kBAAxE,CAAN;AACD;;AAED,QAAIR,OAAOS,OAAP,CAAe,6BAAf,MAAkD,CAAtD,EAAyD;AACvD,aADuD,CAC/C;AACT;;AAED,QAAI,CAACV,SAAL,EAAgB;AACd,UAAIW,WAAW,CAAf;AACA,UAAIC,UAAU,cAAcX,OAAOY,OAAP,CAAe,KAAf,EAAsB,YAAY;AAC5D,eAAOR,KAAKM,UAAL,CAAP;AACD,OAF2B,CAA5B;AAGA,UAAI,OAAOG,OAAP,KAAmB,WAAvB,EAAoC;AAClCA,gBAAQC,KAAR,CAAcH,OAAd;AACD;AACD,UAAI;AACF;AACA;AACA;AACA,cAAM,IAAIH,KAAJ,CAAUG,OAAV,CAAN;AACD,OALD,CAKE,OAAOI,CAAP,EAAU,CAAE;AACf;AACF,GA5BD;AA6BD;;AAEDC,OAAOC,OAAP,GAAiBtB,OAAjB","file":"warning.js","sourceRoot":"/Users/mo/serverless-software","sourcesContent":["/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule warning\n */\n\n'use strict';\n\nvar emptyFunction = require('./emptyFunction');\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = emptyFunction;\n\nif (process.env.NODE_ENV !== 'production') {\n  warning = function (condition, format) {\n    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    if (format === undefined) {\n      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n\n    if (format.indexOf('Failed Composite propType: ') === 0) {\n      return; // Ignore CompositeComponent proptype check.\n    }\n\n    if (!condition) {\n      var argIndex = 0;\n      var message = 'Warning: ' + format.replace(/%s/g, function () {\n        return args[argIndex++];\n      });\n      if (typeof console !== 'undefined') {\n        console.error(message);\n      }\n      try {\n        // --- Welcome to debugging React ---\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch (x) {}\n    }\n  };\n}\n\nmodule.exports = warning;"]}