{"version":3,"sources":["node_modules/react-router/lib/RouteContext.js"],"names":["exports","__esModule","_routerWarning","require","_routerWarning2","_interopRequireDefault","_react","_react2","obj","default","object","PropTypes","RouteContext","propTypes","route","isRequired","childContextTypes","getChildContext","props","componentWillMount","process","env","NODE_ENV","module"],"mappings":"AAAA;;AAEAA,QAAQC,UAAR,GAAqB,IAArB;;AAEA,IAAIC,iBAAiBC,QAAQ,iBAAR,CAArB;;AAEA,IAAIC,kBAAkBC,uBAAuBH,cAAvB,CAAtB;;AAEA,IAAII,SAASH,QAAQ,OAAR,CAAb;;AAEA,IAAII,UAAUF,uBAAuBC,MAAvB,CAAd;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,OAAOA,IAAIP,UAAX,GAAwBO,GAAxB,GAA8B,EAAEC,SAASD,GAAX,EAArC;AAAwD;;AAE/F,IAAIE,SAASH,QAAQE,OAAR,CAAgBE,SAAhB,CAA0BD,MAAvC;;AAEA;;;;;;;AAOA,IAAIE,eAAe;;AAEjBC,aAAW;AACTC,WAAOJ,OAAOK;AADL,GAFM;;AAMjBC,qBAAmB;AACjBF,WAAOJ,OAAOK;AADG,GANF;;AAUjBE,mBAAiB,SAASA,eAAT,GAA2B;AAC1C,WAAO;AACLH,aAAO,KAAKI,KAAL,CAAWJ;AADb,KAAP;AAGD,GAdgB;AAejBK,sBAAoB,SAASA,kBAAT,GAA8B;AAChDC,YAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,CAAC,GAAGlB,gBAAgBK,OAApB,EAA6B,KAA7B,EAAoC,6JAApC,CAAxC,GAA6O,KAAK,CAAlP;AACD;AAjBgB,CAAnB;;AAoBAT,QAAQS,OAAR,GAAkBG,YAAlB;AACAW,OAAOvB,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"RouteContext.js","sourceRoot":"/Users/mo/serverless-software","sourcesContent":["'use strict';\n\nexports.__esModule = true;\n\nvar _routerWarning = require('./routerWarning');\n\nvar _routerWarning2 = _interopRequireDefault(_routerWarning);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar object = _react2.default.PropTypes.object;\n\n/**\n * The RouteContext mixin provides a convenient way for route\n * components to set the route in context. This is needed for\n * routes that render elements that want to use the Lifecycle\n * mixin to prevent transitions.\n */\n\nvar RouteContext = {\n\n  propTypes: {\n    route: object.isRequired\n  },\n\n  childContextTypes: {\n    route: object.isRequired\n  },\n\n  getChildContext: function getChildContext() {\n    return {\n      route: this.props.route\n    };\n  },\n  componentWillMount: function componentWillMount() {\n    process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'The `RouteContext` mixin is deprecated. You can provide `this.props.route` on context with your own `contextTypes`. http://tiny.cc/router-routecontextmixin') : void 0;\n  }\n};\n\nexports.default = RouteContext;\nmodule.exports = exports['default'];"]}