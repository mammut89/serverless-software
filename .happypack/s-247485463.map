{"version":3,"sources":["node_modules/react/lib/ReactDOMOption.js"],"names":["ReactChildren","require","ReactDOMSelect","assign","warning","valueContextKey","ReactDOMOption","mountWrapper","inst","props","context","process","env","NODE_ENV","selected","undefined","selectValue","Array","isArray","i","length","value","_wrapperState","getNativeProps","nativeProps","children","content","forEach","child","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAWA;;AAEA,IAAIA,gBAAgBC,QAAQ,iBAAR,CAApB;AACA,IAAIC,iBAAiBD,QAAQ,kBAAR,CAArB;;AAEA,IAAIE,SAASF,QAAQ,iBAAR,CAAb;AACA,IAAIG,UAAUH,QAAQ,kBAAR,CAAd;;AAEA,IAAII,kBAAkBH,eAAeG,eAArC;;AAEA;;;AAGA,IAAIC,iBAAiB;AACnBC,gBAAc,sBAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,OAAvB,EAAgC;AAC5C;AACA,QAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCF,cAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCT,QAAQK,MAAMK,QAAN,IAAkB,IAA1B,EAAgC,oEAAoE,iCAApG,CAAxC,GAAiLC,SAAjL;AACD;;AAED;AACA,QAAIC,cAAcN,QAAQL,eAAR,CAAlB;;AAEA;AACA;AACA,QAAIS,WAAW,IAAf;AACA,QAAIE,eAAe,IAAnB,EAAyB;AACvBF,iBAAW,KAAX;AACA,UAAIG,MAAMC,OAAN,CAAcF,WAAd,CAAJ,EAAgC;AAC9B;AACA,aAAK,IAAIG,IAAI,CAAb,EAAgBA,IAAIH,YAAYI,MAAhC,EAAwCD,GAAxC,EAA6C;AAC3C,cAAI,KAAKH,YAAYG,CAAZ,CAAL,KAAwB,KAAKV,MAAMY,KAAvC,EAA8C;AAC5CP,uBAAW,IAAX;AACA;AACD;AACF;AACF,OARD,MAQO;AACLA,mBAAW,KAAKE,WAAL,KAAqB,KAAKP,MAAMY,KAA3C;AACD;AACF;;AAEDb,SAAKc,aAAL,GAAqB,EAAER,UAAUA,QAAZ,EAArB;AACD,GA7BkB;;AA+BnBS,kBAAgB,wBAAUf,IAAV,EAAgBC,KAAhB,EAAuBC,OAAvB,EAAgC;AAC9C,QAAIc,cAAcrB,OAAO,EAAEW,UAAUC,SAAZ,EAAuBU,UAAUV,SAAjC,EAAP,EAAqDN,KAArD,CAAlB;;AAEA;AACA;AACA,QAAID,KAAKc,aAAL,CAAmBR,QAAnB,IAA+B,IAAnC,EAAyC;AACvCU,kBAAYV,QAAZ,GAAuBN,KAAKc,aAAL,CAAmBR,QAA1C;AACD;;AAED,QAAIY,UAAU,EAAd;;AAEA;AACA;AACA1B,kBAAc2B,OAAd,CAAsBlB,MAAMgB,QAA5B,EAAsC,UAAUG,KAAV,EAAiB;AACrD,UAAIA,SAAS,IAAb,EAAmB;AACjB;AACD;AACD,UAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAAlD,EAA4D;AAC1DF,mBAAWE,KAAX;AACD,OAFD,MAEO;AACLjB,gBAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCT,QAAQ,KAAR,EAAe,8DAAf,CAAxC,GAAyHW,SAAzH;AACD;AACF,KATD;;AAWA,QAAIW,OAAJ,EAAa;AACXF,kBAAYC,QAAZ,GAAuBC,OAAvB;AACD;;AAED,WAAOF,WAAP;AACD;;AA5DkB,CAArB;;AAgEAK,OAAOC,OAAP,GAAiBxB,cAAjB","file":"ReactDOMOption.js","sourceRoot":"/Users/mo/serverless-software","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMOption\n */\n\n'use strict';\n\nvar ReactChildren = require('./ReactChildren');\nvar ReactDOMSelect = require('./ReactDOMSelect');\n\nvar assign = require('./Object.assign');\nvar warning = require('fbjs/lib/warning');\n\nvar valueContextKey = ReactDOMSelect.valueContextKey;\n\n/**\n * Implements an <option> native component that warns when `selected` is set.\n */\nvar ReactDOMOption = {\n  mountWrapper: function (inst, props, context) {\n    // TODO (yungsters): Remove support for `selected` in <option>.\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;\n    }\n\n    // Look up whether this option is 'selected' via context\n    var selectValue = context[valueContextKey];\n\n    // If context key is null (e.g., no specified value or after initial mount)\n    // or missing (e.g., for <datalist>), we don't change props.selected\n    var selected = null;\n    if (selectValue != null) {\n      selected = false;\n      if (Array.isArray(selectValue)) {\n        // multiple\n        for (var i = 0; i < selectValue.length; i++) {\n          if ('' + selectValue[i] === '' + props.value) {\n            selected = true;\n            break;\n          }\n        }\n      } else {\n        selected = '' + selectValue === '' + props.value;\n      }\n    }\n\n    inst._wrapperState = { selected: selected };\n  },\n\n  getNativeProps: function (inst, props, context) {\n    var nativeProps = assign({ selected: undefined, children: undefined }, props);\n\n    // Read state only from initial mount because <select> updates value\n    // manually; we need the initial state only for server rendering\n    if (inst._wrapperState.selected != null) {\n      nativeProps.selected = inst._wrapperState.selected;\n    }\n\n    var content = '';\n\n    // Flatten children and warn if they aren't strings or numbers;\n    // invalid types are ignored.\n    ReactChildren.forEach(props.children, function (child) {\n      if (child == null) {\n        return;\n      }\n      if (typeof child === 'string' || typeof child === 'number') {\n        content += child;\n      } else {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;\n      }\n    });\n\n    if (content) {\n      nativeProps.children = content;\n    }\n\n    return nativeProps;\n  }\n\n};\n\nmodule.exports = ReactDOMOption;"]}