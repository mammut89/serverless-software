{"version":3,"sources":["node_modules/fbjs/lib/toArray.js"],"names":["invariant","require","toArray","obj","length","Array","isArray","process","env","NODE_ENV","undefined","hasOwnProperty","prototype","slice","call","e","ret","ii","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAYA;;;;AAEA,IAAIA,YAAYC,QAAQ,aAAR,CAAhB;;AAEA;;;;;;;;;AASA,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AACpB,MAAIC,SAASD,IAAIC,MAAjB;;AAEA;AACA;AACA,IAAE,CAACC,MAAMC,OAAN,CAAcH,GAAd,CAAD,KAAwB,QAAOA,GAAP,yCAAOA,GAAP,OAAe,QAAf,IAA2B,OAAOA,GAAP,KAAe,UAAlE,CAAF,IAAmFI,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCT,UAAU,KAAV,EAAiB,qCAAjB,CAAxC,GAAkGA,UAAU,KAAV,CAArL,GAAwMU,SAAxM;;AAEA,IAAE,OAAON,MAAP,KAAkB,QAApB,IAAgCG,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCT,UAAU,KAAV,EAAiB,yCAAjB,CAAxC,GAAsGA,UAAU,KAAV,CAAtI,GAAyJU,SAAzJ;;AAEA,IAAEN,WAAW,CAAX,IAAgBA,SAAS,CAAT,IAAcD,GAAhC,IAAuCI,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCT,UAAU,KAAV,EAAiB,8CAAjB,CAAxC,GAA2GA,UAAU,KAAV,CAAlJ,GAAqKU,SAArK;;AAEA;AACA;AACA;AACA,MAAIP,IAAIQ,cAAR,EAAwB;AACtB,QAAI;AACF,aAAON,MAAMO,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BX,GAA3B,CAAP;AACD,KAFD,CAEE,OAAOY,CAAP,EAAU;AACV;AACD;AACF;;AAED;AACA;AACA,MAAIC,MAAMX,MAAMD,MAAN,CAAV;AACA,OAAK,IAAIa,KAAK,CAAd,EAAiBA,KAAKb,MAAtB,EAA8Ba,IAA9B,EAAoC;AAClCD,QAAIC,EAAJ,IAAUd,IAAIc,EAAJ,CAAV;AACD;AACD,SAAOD,GAAP;AACD;;AAEDE,OAAOC,OAAP,GAAiBjB,OAAjB","file":"toArray.js","sourceRoot":"/Users/mo/serverless-software","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule toArray\n * @typechecks\n */\n\n'use strict';\n\nvar invariant = require('./invariant');\n\n/**\n * Convert array-like objects to arrays.\n *\n * This API assumes the caller knows the contents of the data type. For less\n * well defined inputs use createArrayFromMixed.\n *\n * @param {object|function|filelist} obj\n * @return {array}\n */\nfunction toArray(obj) {\n  var length = obj.length;\n\n  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in\n  // old versions of Safari).\n  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;\n\n  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;\n\n  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;\n\n  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs\n  // without method will throw during the slice call and skip straight to the\n  // fallback.\n  if (obj.hasOwnProperty) {\n    try {\n      return Array.prototype.slice.call(obj);\n    } catch (e) {\n      // IE < 9 does not support Array#slice on collections objects\n    }\n  }\n\n  // Fall back to copying key by key. This assumes all keys have a value,\n  // so will not preserve sparsely populated inputs.\n  var ret = Array(length);\n  for (var ii = 0; ii < length; ii++) {\n    ret[ii] = obj[ii];\n  }\n  return ret;\n}\n\nmodule.exports = toArray;"]}