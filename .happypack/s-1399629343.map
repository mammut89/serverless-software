{"version":3,"sources":["node_modules/react/lib/ReactReconcileTransaction.js"],"names":["CallbackQueue","require","PooledClass","ReactBrowserEventEmitter","ReactDOMFeatureFlags","ReactInputSelection","Transaction","assign","SELECTION_RESTORATION","initialize","getSelectionInformation","close","restoreSelection","EVENT_SUPPRESSION","currentlyEnabled","isEnabled","setEnabled","previouslyEnabled","ON_DOM_READY_QUEUEING","reactMountReady","reset","notifyAll","TRANSACTION_WRAPPERS","ReactReconcileTransaction","forceHTML","reinitializeTransaction","renderToStaticMarkup","getPooled","useCreateElement","Mixin","getTransactionWrappers","getReactMountReady","destructor","release","prototype","addPoolingTo","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAYA;;AAEA,IAAIA,gBAAgBC,QAAQ,iBAAR,CAApB;AACA,IAAIC,cAAcD,QAAQ,eAAR,CAAlB;AACA,IAAIE,2BAA2BF,QAAQ,4BAAR,CAA/B;AACA,IAAIG,uBAAuBH,QAAQ,wBAAR,CAA3B;AACA,IAAII,sBAAsBJ,QAAQ,uBAAR,CAA1B;AACA,IAAIK,cAAcL,QAAQ,eAAR,CAAlB;;AAEA,IAAIM,SAASN,QAAQ,iBAAR,CAAb;;AAEA;;;;AAIA,IAAIO,wBAAwB;AAC1B;;;AAGAC,cAAYJ,oBAAoBK,uBAJN;AAK1B;;;AAGAC,SAAON,oBAAoBO;AARD,CAA5B;;AAWA;;;;;AAKA,IAAIC,oBAAoB;AACtB;;;;AAIAJ,cAAY,sBAAY;AACtB,QAAIK,mBAAmBX,yBAAyBY,SAAzB,EAAvB;AACAZ,6BAAyBa,UAAzB,CAAoC,KAApC;AACA,WAAOF,gBAAP;AACD,GATqB;;AAWtB;;;;;AAKAH,SAAO,eAAUM,iBAAV,EAA6B;AAClCd,6BAAyBa,UAAzB,CAAoCC,iBAApC;AACD;AAlBqB,CAAxB;;AAqBA;;;;AAIA,IAAIC,wBAAwB;AAC1B;;;AAGAT,cAAY,sBAAY;AACtB,SAAKU,eAAL,CAAqBC,KAArB;AACD,GANyB;;AAQ1B;;;AAGAT,SAAO,iBAAY;AACjB,SAAKQ,eAAL,CAAqBE,SAArB;AACD;AAbyB,CAA5B;;AAgBA;;;;;AAKA,IAAIC,uBAAuB,CAACd,qBAAD,EAAwBK,iBAAxB,EAA2CK,qBAA3C,CAA3B;;AAEA;;;;;;;;;;;;;;AAcA,SAASK,yBAAT,CAAmCC,SAAnC,EAA8C;AAC5C,OAAKC,uBAAL;AACA;AACA;AACA;AACA;AACA;AACA,OAAKC,oBAAL,GAA4B,KAA5B;AACA,OAAKP,eAAL,GAAuBnB,cAAc2B,SAAd,CAAwB,IAAxB,CAAvB;AACA,OAAKC,gBAAL,GAAwB,CAACJ,SAAD,IAAcpB,qBAAqBwB,gBAA3D;AACD;;AAED,IAAIC,QAAQ;AACV;;;;;;;AAOAC,0BAAwB,kCAAY;AAClC,WAAOR,oBAAP;AACD,GAVS;;AAYV;;;AAGAS,sBAAoB,8BAAY;AAC9B,WAAO,KAAKZ,eAAZ;AACD,GAjBS;;AAmBV;;;;AAIAa,cAAY,sBAAY;AACtBhC,kBAAciC,OAAd,CAAsB,KAAKd,eAA3B;AACA,SAAKA,eAAL,GAAuB,IAAvB;AACD;AA1BS,CAAZ;;AA6BAZ,OAAOgB,0BAA0BW,SAAjC,EAA4C5B,YAAYuB,KAAxD,EAA+DA,KAA/D;;AAEA3B,YAAYiC,YAAZ,CAAyBZ,yBAAzB;;AAEAa,OAAOC,OAAP,GAAiBd,yBAAjB","file":"ReactReconcileTransaction.js","sourceRoot":"/Users/mo/serverless-software","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactReconcileTransaction\n * @typechecks static-only\n */\n\n'use strict';\n\nvar CallbackQueue = require('./CallbackQueue');\nvar PooledClass = require('./PooledClass');\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');\nvar ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');\nvar ReactInputSelection = require('./ReactInputSelection');\nvar Transaction = require('./Transaction');\n\nvar assign = require('./Object.assign');\n\n/**\n * Ensures that, when possible, the selection range (currently selected text\n * input) is not disturbed by performing the transaction.\n */\nvar SELECTION_RESTORATION = {\n  /**\n   * @return {Selection} Selection information.\n   */\n  initialize: ReactInputSelection.getSelectionInformation,\n  /**\n   * @param {Selection} sel Selection information returned from `initialize`.\n   */\n  close: ReactInputSelection.restoreSelection\n};\n\n/**\n * Suppresses events (blur/focus) that could be inadvertently dispatched due to\n * high level DOM manipulations (like temporarily removing a text input from the\n * DOM).\n */\nvar EVENT_SUPPRESSION = {\n  /**\n   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before\n   * the reconciliation.\n   */\n  initialize: function () {\n    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();\n    ReactBrowserEventEmitter.setEnabled(false);\n    return currentlyEnabled;\n  },\n\n  /**\n   * @param {boolean} previouslyEnabled Enabled status of\n   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`\n   *   restores the previous value.\n   */\n  close: function (previouslyEnabled) {\n    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);\n  }\n};\n\n/**\n * Provides a queue for collecting `componentDidMount` and\n * `componentDidUpdate` callbacks during the the transaction.\n */\nvar ON_DOM_READY_QUEUEING = {\n  /**\n   * Initializes the internal `onDOMReady` queue.\n   */\n  initialize: function () {\n    this.reactMountReady.reset();\n  },\n\n  /**\n   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.\n   */\n  close: function () {\n    this.reactMountReady.notifyAll();\n  }\n};\n\n/**\n * Executed within the scope of the `Transaction` instance. Consider these as\n * being member methods, but with an implied ordering while being isolated from\n * each other.\n */\nvar TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];\n\n/**\n * Currently:\n * - The order that these are listed in the transaction is critical:\n * - Suppresses events.\n * - Restores selection range.\n *\n * Future:\n * - Restore document/overflow scroll positions that were unintentionally\n *   modified via DOM insertions above the top viewport boundary.\n * - Implement/integrate with customized constraint based layout system and keep\n *   track of which dimensions must be remeasured.\n *\n * @class ReactReconcileTransaction\n */\nfunction ReactReconcileTransaction(forceHTML) {\n  this.reinitializeTransaction();\n  // Only server-side rendering really needs this option (see\n  // `ReactServerRendering`), but server-side uses\n  // `ReactServerRenderingTransaction` instead. This option is here so that it's\n  // accessible and defaults to false when `ReactDOMComponent` and\n  // `ReactTextComponent` checks it in `mountComponent`.`\n  this.renderToStaticMarkup = false;\n  this.reactMountReady = CallbackQueue.getPooled(null);\n  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;\n}\n\nvar Mixin = {\n  /**\n   * @see Transaction\n   * @abstract\n   * @final\n   * @return {array<object>} List of operation wrap procedures.\n   *   TODO: convert to array<TransactionWrapper>\n   */\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  /**\n   * @return {object} The queue to collect `onDOMReady` callbacks with.\n   */\n  getReactMountReady: function () {\n    return this.reactMountReady;\n  },\n\n  /**\n   * `PooledClass` looks for this, and will invoke this before allowing this\n   * instance to be reused.\n   */\n  destructor: function () {\n    CallbackQueue.release(this.reactMountReady);\n    this.reactMountReady = null;\n  }\n};\n\nassign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);\n\nPooledClass.addPoolingTo(ReactReconcileTransaction);\n\nmodule.exports = ReactReconcileTransaction;"]}