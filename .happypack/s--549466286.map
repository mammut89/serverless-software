{"version":3,"sources":["node_modules/react/lib/EnterLeaveEventPlugin.js"],"names":["EventConstants","require","EventPropagators","SyntheticMouseEvent","ReactMount","keyOf","topLevelTypes","getFirstReactDOM","eventTypes","mouseEnter","registrationName","onMouseEnter","dependencies","topMouseOut","topMouseOver","mouseLeave","onMouseLeave","extractedEvents","EnterLeaveEventPlugin","extractEvents","topLevelType","topLevelTarget","topLevelTargetID","nativeEvent","nativeEventTarget","relatedTarget","fromElement","win","window","doc","ownerDocument","defaultView","parentWindow","from","to","fromID","toID","toElement","getID","leave","getPooled","type","target","enter","accumulateEnterLeaveDispatches","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAYA;;AAEA,IAAIA,iBAAiBC,QAAQ,kBAAR,CAArB;AACA,IAAIC,mBAAmBD,QAAQ,oBAAR,CAAvB;AACA,IAAIE,sBAAsBF,QAAQ,uBAAR,CAA1B;;AAEA,IAAIG,aAAaH,QAAQ,cAAR,CAAjB;AACA,IAAII,QAAQJ,QAAQ,gBAAR,CAAZ;;AAEA,IAAIK,gBAAgBN,eAAeM,aAAnC;AACA,IAAIC,mBAAmBH,WAAWG,gBAAlC;;AAEA,IAAIC,aAAa;AACfC,cAAY;AACVC,sBAAkBL,MAAM,EAAEM,cAAc,IAAhB,EAAN,CADR;AAEVC,kBAAc,CAACN,cAAcO,WAAf,EAA4BP,cAAcQ,YAA1C;AAFJ,GADG;AAKfC,cAAY;AACVL,sBAAkBL,MAAM,EAAEW,cAAc,IAAhB,EAAN,CADR;AAEVJ,kBAAc,CAACN,cAAcO,WAAf,EAA4BP,cAAcQ,YAA1C;AAFJ;AALG,CAAjB;;AAWA,IAAIG,kBAAkB,CAAC,IAAD,EAAO,IAAP,CAAtB;;AAEA,IAAIC,wBAAwB;;AAE1BV,cAAYA,UAFc;;AAI1B;;;;;;;;;;;;;;AAcAW,iBAAe,uBAAUC,YAAV,EAAwBC,cAAxB,EAAwCC,gBAAxC,EAA0DC,WAA1D,EAAuEC,iBAAvE,EAA0F;AACvG,QAAIJ,iBAAiBd,cAAcQ,YAA/B,KAAgDS,YAAYE,aAAZ,IAA6BF,YAAYG,WAAzF,CAAJ,EAA2G;AACzG,aAAO,IAAP;AACD;AACD,QAAIN,iBAAiBd,cAAcO,WAA/B,IAA8CO,iBAAiBd,cAAcQ,YAAjF,EAA+F;AAC7F;AACA,aAAO,IAAP;AACD;;AAED,QAAIa,GAAJ;AACA,QAAIN,eAAeO,MAAf,KAA0BP,cAA9B,EAA8C;AAC5C;AACAM,YAAMN,cAAN;AACD,KAHD,MAGO;AACL;AACA,UAAIQ,MAAMR,eAAeS,aAAzB;AACA,UAAID,GAAJ,EAAS;AACPF,cAAME,IAAIE,WAAJ,IAAmBF,IAAIG,YAA7B;AACD,OAFD,MAEO;AACLL,cAAMC,MAAN;AACD;AACF;;AAED,QAAIK,IAAJ;AACA,QAAIC,EAAJ;AACA,QAAIC,SAAS,EAAb;AACA,QAAIC,OAAO,EAAX;AACA,QAAIhB,iBAAiBd,cAAcO,WAAnC,EAAgD;AAC9CoB,aAAOZ,cAAP;AACAc,eAASb,gBAAT;AACAY,WAAK3B,iBAAiBgB,YAAYE,aAAZ,IAA6BF,YAAYc,SAA1D,CAAL;AACA,UAAIH,EAAJ,EAAQ;AACNE,eAAOhC,WAAWkC,KAAX,CAAiBJ,EAAjB,CAAP;AACD,OAFD,MAEO;AACLA,aAAKP,GAAL;AACD;AACDO,WAAKA,MAAMP,GAAX;AACD,KAVD,MAUO;AACLM,aAAON,GAAP;AACAO,WAAKb,cAAL;AACAe,aAAOd,gBAAP;AACD;;AAED,QAAIW,SAASC,EAAb,EAAiB;AACf;AACA,aAAO,IAAP;AACD;;AAED,QAAIK,QAAQpC,oBAAoBqC,SAApB,CAA8BhC,WAAWO,UAAzC,EAAqDoB,MAArD,EAA6DZ,WAA7D,EAA0EC,iBAA1E,CAAZ;AACAe,UAAME,IAAN,GAAa,YAAb;AACAF,UAAMG,MAAN,GAAeT,IAAf;AACAM,UAAMd,aAAN,GAAsBS,EAAtB;;AAEA,QAAIS,QAAQxC,oBAAoBqC,SAApB,CAA8BhC,WAAWC,UAAzC,EAAqD2B,IAArD,EAA2Db,WAA3D,EAAwEC,iBAAxE,CAAZ;AACAmB,UAAMF,IAAN,GAAa,YAAb;AACAE,UAAMD,MAAN,GAAeR,EAAf;AACAS,UAAMlB,aAAN,GAAsBQ,IAAtB;;AAEA/B,qBAAiB0C,8BAAjB,CAAgDL,KAAhD,EAAuDI,KAAvD,EAA8DR,MAA9D,EAAsEC,IAAtE;;AAEAnB,oBAAgB,CAAhB,IAAqBsB,KAArB;AACAtB,oBAAgB,CAAhB,IAAqB0B,KAArB;;AAEA,WAAO1B,eAAP;AACD;;AAlFyB,CAA5B;;AAsFA4B,OAAOC,OAAP,GAAiB5B,qBAAjB","file":"EnterLeaveEventPlugin.js","sourceRoot":"/Users/mo/serverless-software","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EnterLeaveEventPlugin\n * @typechecks static-only\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPropagators = require('./EventPropagators');\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');\n\nvar ReactMount = require('./ReactMount');\nvar keyOf = require('fbjs/lib/keyOf');\n\nvar topLevelTypes = EventConstants.topLevelTypes;\nvar getFirstReactDOM = ReactMount.getFirstReactDOM;\n\nvar eventTypes = {\n  mouseEnter: {\n    registrationName: keyOf({ onMouseEnter: null }),\n    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]\n  },\n  mouseLeave: {\n    registrationName: keyOf({ onMouseLeave: null }),\n    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]\n  }\n};\n\nvar extractedEvents = [null, null];\n\nvar EnterLeaveEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * For almost every interaction we care about, there will be both a top-level\n   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that\n   * we do not extract duplicate events. However, moving the mouse into the\n   * browser from outside will not fire a `mouseout` event. In this case, we use\n   * the `mouseover` top-level event.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {\n      return null;\n    }\n    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {\n      // Must not be a mouse in or mouse out - ignoring.\n      return null;\n    }\n\n    var win;\n    if (topLevelTarget.window === topLevelTarget) {\n      // `topLevelTarget` is probably a window object.\n      win = topLevelTarget;\n    } else {\n      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\n      var doc = topLevelTarget.ownerDocument;\n      if (doc) {\n        win = doc.defaultView || doc.parentWindow;\n      } else {\n        win = window;\n      }\n    }\n\n    var from;\n    var to;\n    var fromID = '';\n    var toID = '';\n    if (topLevelType === topLevelTypes.topMouseOut) {\n      from = topLevelTarget;\n      fromID = topLevelTargetID;\n      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);\n      if (to) {\n        toID = ReactMount.getID(to);\n      } else {\n        to = win;\n      }\n      to = to || win;\n    } else {\n      from = win;\n      to = topLevelTarget;\n      toID = topLevelTargetID;\n    }\n\n    if (from === to) {\n      // Nothing pertains to our managed components.\n      return null;\n    }\n\n    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);\n    leave.type = 'mouseleave';\n    leave.target = from;\n    leave.relatedTarget = to;\n\n    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);\n    enter.type = 'mouseenter';\n    enter.target = to;\n    enter.relatedTarget = from;\n\n    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);\n\n    extractedEvents[0] = leave;\n    extractedEvents[1] = enter;\n\n    return extractedEvents;\n  }\n\n};\n\nmodule.exports = EnterLeaveEventPlugin;"]}