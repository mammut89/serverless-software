{"version":3,"sources":["node_modules/history/lib/DOMStateStorage.js"],"names":["exports","__esModule","saveState","readState","_interopRequireDefault","obj","_warning","require","_warning2","KeyPrefix","QuotaExceededErrors","SecurityError","createKey","key","state","window","sessionStorage","removeItem","setItem","JSON","stringify","error","name","process","env","NODE_ENV","undefined","indexOf","length","json","getItem","parse"],"mappings":"AAAA;AACA;;AAEAA,QAAQC,UAAR,GAAqB,IAArB;AACAD,QAAQE,SAAR,GAAoBA,SAApB;AACAF,QAAQG,SAAR,GAAoBA,SAApB;;AAEA,SAASC,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,OAAOA,IAAIJ,UAAX,GAAwBI,GAAxB,GAA8B,EAAE,WAAWA,GAAb,EAArC;AAA0D;;AAEjG,IAAIC,WAAWC,QAAQ,SAAR,CAAf;;AAEA,IAAIC,YAAYJ,uBAAuBE,QAAvB,CAAhB;;AAEA,IAAIG,YAAY,YAAhB;AACA,IAAIC,sBAAsB,CAAC,oBAAD,EAAuB,oBAAvB,CAA1B;;AAEA,IAAIC,gBAAgB,eAApB;;AAEA,SAASC,SAAT,CAAmBC,GAAnB,EAAwB;AACtB,SAAOJ,YAAYI,GAAnB;AACD;;AAED,SAASX,SAAT,CAAmBW,GAAnB,EAAwBC,KAAxB,EAA+B;AAC7B,MAAI;AACF,QAAIA,SAAS,IAAb,EAAmB;AACjBC,aAAOC,cAAP,CAAsBC,UAAtB,CAAiCL,UAAUC,GAAV,CAAjC;AACD,KAFD,MAEO;AACLE,aAAOC,cAAP,CAAsBE,OAAtB,CAA8BN,UAAUC,GAAV,CAA9B,EAA8CM,KAAKC,SAAL,CAAeN,KAAf,CAA9C;AACD;AACF,GAND,CAME,OAAOO,KAAP,EAAc;AACd,QAAIA,MAAMC,IAAN,KAAeX,aAAnB,EAAkC;AAChC;AACA;AACAY,cAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCjB,UAAU,SAAV,EAAqB,KAArB,EAA4B,0FAA5B,CAAxC,GAAkKkB,SAAlK;;AAEA;AACD;;AAED,QAAIhB,oBAAoBiB,OAApB,CAA4BN,MAAMC,IAAlC,KAA2C,CAA3C,IAAgDP,OAAOC,cAAP,CAAsBY,MAAtB,KAAiC,CAArF,EAAwF;AACtF;AACAL,cAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCjB,UAAU,SAAV,EAAqB,KAArB,EAA4B,wFAA5B,CAAxC,GAAgKkB,SAAhK;;AAEA;AACD;;AAED,UAAML,KAAN;AACD;AACF;;AAED,SAASlB,SAAT,CAAmBU,GAAnB,EAAwB;AACtB,MAAIgB,OAAOH,SAAX;AACA,MAAI;AACFG,WAAOd,OAAOC,cAAP,CAAsBc,OAAtB,CAA8BlB,UAAUC,GAAV,CAA9B,CAAP;AACD,GAFD,CAEE,OAAOQ,KAAP,EAAc;AACd,QAAIA,MAAMC,IAAN,KAAeX,aAAnB,EAAkC;AAChC;AACA;AACAY,cAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCjB,UAAU,SAAV,EAAqB,KAArB,EAA4B,0FAA5B,CAAxC,GAAkKkB,SAAlK;;AAEA,aAAO,IAAP;AACD;AACF;;AAED,MAAIG,IAAJ,EAAU;AACR,QAAI;AACF,aAAOV,KAAKY,KAAL,CAAWF,IAAX,CAAP;AACD,KAFD,CAEE,OAAOR,KAAP,EAAc;AACd;AACD;AACF;;AAED,SAAO,IAAP;AACD","file":"DOMStateStorage.js","sourceRoot":"/Users/mo/serverless-software","sourcesContent":["/*eslint-disable no-empty */\n'use strict';\n\nexports.__esModule = true;\nexports.saveState = saveState;\nexports.readState = readState;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar KeyPrefix = '@@History/';\nvar QuotaExceededErrors = ['QuotaExceededError', 'QUOTA_EXCEEDED_ERR'];\n\nvar SecurityError = 'SecurityError';\n\nfunction createKey(key) {\n  return KeyPrefix + key;\n}\n\nfunction saveState(key, state) {\n  try {\n    if (state == null) {\n      window.sessionStorage.removeItem(createKey(key));\n    } else {\n      window.sessionStorage.setItem(createKey(key), JSON.stringify(state));\n    }\n  } catch (error) {\n    if (error.name === SecurityError) {\n      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any\n      // attempt to access window.sessionStorage.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available due to security settings') : undefined;\n\n      return;\n    }\n\n    if (QuotaExceededErrors.indexOf(error.name) >= 0 && window.sessionStorage.length === 0) {\n      // Safari \"private mode\" throws QuotaExceededError.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available in Safari private mode') : undefined;\n\n      return;\n    }\n\n    throw error;\n  }\n}\n\nfunction readState(key) {\n  var json = undefined;\n  try {\n    json = window.sessionStorage.getItem(createKey(key));\n  } catch (error) {\n    if (error.name === SecurityError) {\n      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any\n      // attempt to access window.sessionStorage.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to read state; sessionStorage is not available due to security settings') : undefined;\n\n      return null;\n    }\n  }\n\n  if (json) {\n    try {\n      return JSON.parse(json);\n    } catch (error) {\n      // Ignore invalid JSON.\n    }\n  }\n\n  return null;\n}"]}