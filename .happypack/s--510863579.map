{"version":3,"sources":["node_modules/react/lib/EventPluginRegistry.js"],"names":["invariant","require","EventPluginOrder","namesToPlugins","recomputePluginOrdering","pluginName","PluginModule","pluginIndex","indexOf","process","env","NODE_ENV","undefined","EventPluginRegistry","plugins","extractEvents","publishedEvents","eventTypes","eventName","publishEventForPlugin","dispatchConfig","eventNameDispatchConfigs","hasOwnProperty","phasedRegistrationNames","phaseName","phasedRegistrationName","publishRegistrationName","registrationName","registrationNameModules","registrationNameDependencies","dependencies","injectEventPluginOrder","InjectedEventPluginOrder","Array","prototype","slice","call","injectEventPluginsByName","injectedNamesToPlugins","isOrderingDirty","getPluginModuleForEvent","event","phase","_resetEventPlugins","length","module","exports"],"mappings":"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","file":"EventPluginRegistry.js","sourceRoot":"/Users/mo/serverless-software","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginRegistry\n * @typechecks static-only\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Injectable ordering of event plugins.\n */\nvar EventPluginOrder = null;\n\n/**\n * Injectable mapping from names to event plugin modules.\n */\nvar namesToPlugins = {};\n\n/**\n * Recomputes the plugin list using the injected plugins and plugin ordering.\n *\n * @private\n */\nfunction recomputePluginOrdering() {\n  if (!EventPluginOrder) {\n    // Wait until an `EventPluginOrder` is injected.\n    return;\n  }\n  for (var pluginName in namesToPlugins) {\n    var PluginModule = namesToPlugins[pluginName];\n    var pluginIndex = EventPluginOrder.indexOf(pluginName);\n    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;\n    if (EventPluginRegistry.plugins[pluginIndex]) {\n      continue;\n    }\n    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;\n    EventPluginRegistry.plugins[pluginIndex] = PluginModule;\n    var publishedEvents = PluginModule.eventTypes;\n    for (var eventName in publishedEvents) {\n      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;\n    }\n  }\n}\n\n/**\n * Publishes an event so that it can be dispatched by the supplied plugin.\n *\n * @param {object} dispatchConfig Dispatch configuration for the event.\n * @param {object} PluginModule Plugin publishing the event.\n * @return {boolean} True if the event was successfully published.\n * @private\n */\nfunction publishEventForPlugin(dispatchConfig, PluginModule, eventName) {\n  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;\n  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;\n\n  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n  if (phasedRegistrationNames) {\n    for (var phaseName in phasedRegistrationNames) {\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {\n        var phasedRegistrationName = phasedRegistrationNames[phaseName];\n        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);\n      }\n    }\n    return true;\n  } else if (dispatchConfig.registrationName) {\n    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Publishes a registration name that is used to identify dispatched events and\n * can be used with `EventPluginHub.putListener` to register listeners.\n *\n * @param {string} registrationName Registration name to add.\n * @param {object} PluginModule Plugin publishing the event.\n * @private\n */\nfunction publishRegistrationName(registrationName, PluginModule, eventName) {\n  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;\n  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;\n  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;\n}\n\n/**\n * Registers plugins so that they can extract and dispatch events.\n *\n * @see {EventPluginHub}\n */\nvar EventPluginRegistry = {\n\n  /**\n   * Ordered list of injected plugins.\n   */\n  plugins: [],\n\n  /**\n   * Mapping from event name to dispatch config\n   */\n  eventNameDispatchConfigs: {},\n\n  /**\n   * Mapping from registration name to plugin module\n   */\n  registrationNameModules: {},\n\n  /**\n   * Mapping from registration name to event name\n   */\n  registrationNameDependencies: {},\n\n  /**\n   * Injects an ordering of plugins (by plugin name). This allows the ordering\n   * to be decoupled from injection of the actual plugins so that ordering is\n   * always deterministic regardless of packaging, on-the-fly injection, etc.\n   *\n   * @param {array} InjectedEventPluginOrder\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginOrder}\n   */\n  injectEventPluginOrder: function (InjectedEventPluginOrder) {\n    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;\n    // Clone the ordering so it cannot be dynamically mutated.\n    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);\n    recomputePluginOrdering();\n  },\n\n  /**\n   * Injects plugins to be used by `EventPluginHub`. The plugin names must be\n   * in the ordering injected by `injectEventPluginOrder`.\n   *\n   * Plugins can be injected as part of page initialization or on-the-fly.\n   *\n   * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginsByName}\n   */\n  injectEventPluginsByName: function (injectedNamesToPlugins) {\n    var isOrderingDirty = false;\n    for (var pluginName in injectedNamesToPlugins) {\n      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {\n        continue;\n      }\n      var PluginModule = injectedNamesToPlugins[pluginName];\n      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {\n        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;\n        namesToPlugins[pluginName] = PluginModule;\n        isOrderingDirty = true;\n      }\n    }\n    if (isOrderingDirty) {\n      recomputePluginOrdering();\n    }\n  },\n\n  /**\n   * Looks up the plugin for the supplied event.\n   *\n   * @param {object} event A synthetic event.\n   * @return {?object} The plugin that created the supplied event.\n   * @internal\n   */\n  getPluginModuleForEvent: function (event) {\n    var dispatchConfig = event.dispatchConfig;\n    if (dispatchConfig.registrationName) {\n      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;\n    }\n    for (var phase in dispatchConfig.phasedRegistrationNames) {\n      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {\n        continue;\n      }\n      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];\n      if (PluginModule) {\n        return PluginModule;\n      }\n    }\n    return null;\n  },\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _resetEventPlugins: function () {\n    EventPluginOrder = null;\n    for (var pluginName in namesToPlugins) {\n      if (namesToPlugins.hasOwnProperty(pluginName)) {\n        delete namesToPlugins[pluginName];\n      }\n    }\n    EventPluginRegistry.plugins.length = 0;\n\n    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;\n    for (var eventName in eventNameDispatchConfigs) {\n      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {\n        delete eventNameDispatchConfigs[eventName];\n      }\n    }\n\n    var registrationNameModules = EventPluginRegistry.registrationNameModules;\n    for (var registrationName in registrationNameModules) {\n      if (registrationNameModules.hasOwnProperty(registrationName)) {\n        delete registrationNameModules[registrationName];\n      }\n    }\n  }\n\n};\n\nmodule.exports = EventPluginRegistry;"]}