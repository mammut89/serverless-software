{"version":3,"sources":["node_modules/react/lib/ReactDefaultBatchingStrategy.js"],"names":["ReactUpdates","require","Transaction","assign","emptyFunction","RESET_BATCHED_UPDATES","initialize","close","ReactDefaultBatchingStrategy","isBatchingUpdates","FLUSH_BATCHED_UPDATES","flushBatchedUpdates","bind","TRANSACTION_WRAPPERS","ReactDefaultBatchingStrategyTransaction","reinitializeTransaction","prototype","Mixin","getTransactionWrappers","transaction","batchedUpdates","callback","a","b","c","d","e","alreadyBatchingUpdates","perform","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAWA;;AAEA,IAAIA,eAAeC,QAAQ,gBAAR,CAAnB;AACA,IAAIC,cAAcD,QAAQ,eAAR,CAAlB;;AAEA,IAAIE,SAASF,QAAQ,iBAAR,CAAb;AACA,IAAIG,gBAAgBH,QAAQ,wBAAR,CAApB;;AAEA,IAAII,wBAAwB;AAC1BC,cAAYF,aADc;AAE1BG,SAAO,iBAAY;AACjBC,iCAA6BC,iBAA7B,GAAiD,KAAjD;AACD;AAJyB,CAA5B;;AAOA,IAAIC,wBAAwB;AAC1BJ,cAAYF,aADc;AAE1BG,SAAOP,aAAaW,mBAAb,CAAiCC,IAAjC,CAAsCZ,YAAtC;AAFmB,CAA5B;;AAKA,IAAIa,uBAAuB,CAACH,qBAAD,EAAwBL,qBAAxB,CAA3B;;AAEA,SAASS,uCAAT,GAAmD;AACjD,OAAKC,uBAAL;AACD;;AAEDZ,OAAOW,wCAAwCE,SAA/C,EAA0Dd,YAAYe,KAAtE,EAA6E;AAC3EC,0BAAwB,kCAAY;AAClC,WAAOL,oBAAP;AACD;AAH0E,CAA7E;;AAMA,IAAIM,cAAc,IAAIL,uCAAJ,EAAlB;;AAEA,IAAIN,+BAA+B;AACjCC,qBAAmB,KADc;;AAGjC;;;;AAIAW,kBAAgB,wBAAUC,QAAV,EAAoBC,CAApB,EAAuBC,CAAvB,EAA0BC,CAA1B,EAA6BC,CAA7B,EAAgCC,CAAhC,EAAmC;AACjD,QAAIC,yBAAyBnB,6BAA6BC,iBAA1D;;AAEAD,iCAA6BC,iBAA7B,GAAiD,IAAjD;;AAEA;AACA,QAAIkB,sBAAJ,EAA4B;AAC1BN,eAASC,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkBC,CAAlB,EAAqBC,CAArB;AACD,KAFD,MAEO;AACLP,kBAAYS,OAAZ,CAAoBP,QAApB,EAA8B,IAA9B,EAAoCC,CAApC,EAAuCC,CAAvC,EAA0CC,CAA1C,EAA6CC,CAA7C,EAAgDC,CAAhD;AACD;AACF;AAlBgC,CAAnC;;AAqBAG,OAAOC,OAAP,GAAiBtB,4BAAjB","file":"ReactDefaultBatchingStrategy.js","sourceRoot":"/Users/mo/serverless-software","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultBatchingStrategy\n */\n\n'use strict';\n\nvar ReactUpdates = require('./ReactUpdates');\nvar Transaction = require('./Transaction');\n\nvar assign = require('./Object.assign');\nvar emptyFunction = require('fbjs/lib/emptyFunction');\n\nvar RESET_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: function () {\n    ReactDefaultBatchingStrategy.isBatchingUpdates = false;\n  }\n};\n\nvar FLUSH_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)\n};\n\nvar TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];\n\nfunction ReactDefaultBatchingStrategyTransaction() {\n  this.reinitializeTransaction();\n}\n\nassign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  }\n});\n\nvar transaction = new ReactDefaultBatchingStrategyTransaction();\n\nvar ReactDefaultBatchingStrategy = {\n  isBatchingUpdates: false,\n\n  /**\n   * Call the provided function in a context within which calls to `setState`\n   * and friends are batched such that components aren't updated unnecessarily.\n   */\n  batchedUpdates: function (callback, a, b, c, d, e) {\n    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;\n\n    ReactDefaultBatchingStrategy.isBatchingUpdates = true;\n\n    // The code is written this way to avoid extra allocations\n    if (alreadyBatchingUpdates) {\n      callback(a, b, c, d, e);\n    } else {\n      transaction.perform(callback, null, a, b, c, d, e);\n    }\n  }\n};\n\nmodule.exports = ReactDefaultBatchingStrategy;"]}