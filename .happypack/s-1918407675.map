{"version":3,"sources":["node_modules/react/lib/ReactMarkupChecksum.js"],"names":["adler32","require","TAG_END","ReactMarkupChecksum","CHECKSUM_ATTR_NAME","addChecksumToMarkup","markup","checksum","replace","canReuseMarkup","element","existingChecksum","getAttribute","parseInt","markupChecksum","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAWA;;AAEA,IAAIA,UAAUC,QAAQ,WAAR,CAAd;;AAEA,IAAIC,UAAU,MAAd;;AAEA,IAAIC,sBAAsB;AACxBC,sBAAoB,qBADI;;AAGxB;;;;AAIAC,uBAAqB,6BAAUC,MAAV,EAAkB;AACrC,QAAIC,WAAWP,QAAQM,MAAR,CAAf;;AAEA;AACA,WAAOA,OAAOE,OAAP,CAAeN,OAAf,EAAwB,MAAMC,oBAAoBC,kBAA1B,GAA+C,IAA/C,GAAsDG,QAAtD,GAAiE,KAAzF,CAAP;AACD,GAZuB;;AAcxB;;;;;AAKAE,kBAAgB,wBAAUH,MAAV,EAAkBI,OAAlB,EAA2B;AACzC,QAAIC,mBAAmBD,QAAQE,YAAR,CAAqBT,oBAAoBC,kBAAzC,CAAvB;AACAO,uBAAmBA,oBAAoBE,SAASF,gBAAT,EAA2B,EAA3B,CAAvC;AACA,QAAIG,iBAAiBd,QAAQM,MAAR,CAArB;AACA,WAAOQ,mBAAmBH,gBAA1B;AACD;AAxBuB,CAA1B;;AA2BAI,OAAOC,OAAP,GAAiBb,mBAAjB","file":"ReactMarkupChecksum.js","sourceRoot":"/Users/mo/serverless-software","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMarkupChecksum\n */\n\n'use strict';\n\nvar adler32 = require('./adler32');\n\nvar TAG_END = /\\/?>/;\n\nvar ReactMarkupChecksum = {\n  CHECKSUM_ATTR_NAME: 'data-react-checksum',\n\n  /**\n   * @param {string} markup Markup string\n   * @return {string} Markup string with checksum attribute attached\n   */\n  addChecksumToMarkup: function (markup) {\n    var checksum = adler32(markup);\n\n    // Add checksum (handle both parent tags and self-closing tags)\n    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '=\"' + checksum + '\"$&');\n  },\n\n  /**\n   * @param {string} markup to use\n   * @param {DOMElement} element root React element\n   * @returns {boolean} whether or not the markup is the same\n   */\n  canReuseMarkup: function (markup, element) {\n    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);\n    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);\n    var markupChecksum = adler32(markup);\n    return markupChecksum === existingChecksum;\n  }\n};\n\nmodule.exports = ReactMarkupChecksum;"]}