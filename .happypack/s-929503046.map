{"version":3,"sources":["node_modules/react/lib/ReactOwner.js"],"names":["invariant","require","ReactOwner","isValidOwner","object","attachRef","detachRef","addComponentAsRefTo","component","ref","owner","process","env","NODE_ENV","undefined","removeComponentAsRefFrom","getPublicInstance","refs","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAWA;;AAEA,IAAIA,YAAYC,QAAQ,oBAAR,CAAhB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,IAAIC,aAAa;;AAEf;;;;;AAKAC,gBAAc,sBAAUC,MAAV,EAAkB;AAC9B,WAAO,CAAC,EAAEA,UAAU,OAAOA,OAAOC,SAAd,KAA4B,UAAtC,IAAoD,OAAOD,OAAOE,SAAd,KAA4B,UAAlF,CAAR;AACD,GATc;;AAWf;;;;;;;;;AASAC,uBAAqB,6BAAUC,SAAV,EAAqBC,GAArB,EAA0BC,KAA1B,EAAiC;AACpD,KAACR,WAAWC,YAAX,CAAwBO,KAAxB,CAAD,GAAkCC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCb,UAAU,KAAV,EAAiB,0EAA0E,4EAA1E,GAAyJ,+DAAzJ,GAA2N,sDAA5O,CAAxC,GAA8UA,UAAU,KAAV,CAAhX,GAAmYc,SAAnY;AACAJ,UAAML,SAAN,CAAgBI,GAAhB,EAAqBD,SAArB;AACD,GAvBc;;AAyBf;;;;;;;;;AASAO,4BAA0B,kCAAUP,SAAV,EAAqBC,GAArB,EAA0BC,KAA1B,EAAiC;AACzD,KAACR,WAAWC,YAAX,CAAwBO,KAAxB,CAAD,GAAkCC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCb,UAAU,KAAV,EAAiB,+EAA+E,8EAA/E,GAAgK,+DAAhK,GAAkO,sDAAnP,CAAxC,GAAqVA,UAAU,KAAV,CAAvX,GAA0Yc,SAA1Y;AACA;AACA;AACA,QAAIJ,MAAMM,iBAAN,GAA0BC,IAA1B,CAA+BR,GAA/B,MAAwCD,UAAUQ,iBAAV,EAA5C,EAA2E;AACzEN,YAAMJ,SAAN,CAAgBG,GAAhB;AACD;AACF;;AAzCc,CAAjB;;AA6CAS,OAAOC,OAAP,GAAiBjB,UAAjB","file":"ReactOwner.js","sourceRoot":"/Users/mo/serverless-software","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactOwner\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * ReactOwners are capable of storing references to owned components.\n *\n * All components are capable of //being// referenced by owner components, but\n * only ReactOwner components are capable of //referencing// owned components.\n * The named reference is known as a \"ref\".\n *\n * Refs are available when mounted and updated during reconciliation.\n *\n *   var MyComponent = React.createClass({\n *     render: function() {\n *       return (\n *         <div onClick={this.handleClick}>\n *           <CustomComponent ref=\"custom\" />\n *         </div>\n *       );\n *     },\n *     handleClick: function() {\n *       this.refs.custom.handleClick();\n *     },\n *     componentDidMount: function() {\n *       this.refs.custom.initialize();\n *     }\n *   });\n *\n * Refs should rarely be used. When refs are used, they should only be done to\n * control data that is not handled by React's data flow.\n *\n * @class ReactOwner\n */\nvar ReactOwner = {\n\n  /**\n   * @param {?object} object\n   * @return {boolean} True if `object` is a valid owner.\n   * @final\n   */\n  isValidOwner: function (object) {\n    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');\n  },\n\n  /**\n   * Adds a component by ref to an owner component.\n   *\n   * @param {ReactComponent} component Component to reference.\n   * @param {string} ref Name by which to refer to the component.\n   * @param {ReactOwner} owner Component on which to record the ref.\n   * @final\n   * @internal\n   */\n  addComponentAsRefTo: function (component, ref, owner) {\n    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;\n    owner.attachRef(ref, component);\n  },\n\n  /**\n   * Removes a component by ref from an owner component.\n   *\n   * @param {ReactComponent} component Component to dereference.\n   * @param {string} ref Name of the ref to remove.\n   * @param {ReactOwner} owner Component on which the ref is recorded.\n   * @final\n   * @internal\n   */\n  removeComponentAsRefFrom: function (component, ref, owner) {\n    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;\n    // Check that `component` is still the current ref because we do not want to\n    // detach the ref if another component stole it.\n    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {\n      owner.detachRef(ref);\n    }\n  }\n\n};\n\nmodule.exports = ReactOwner;"]}