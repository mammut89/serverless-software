{"version":3,"sources":["node_modules/fbjs/lib/createNodesFromMarkup.js"],"names":["ExecutionEnvironment","require","createArrayFromMixed","getMarkupWrap","invariant","dummyNode","canUseDOM","document","createElement","nodeNamePattern","getNodeName","markup","nodeNameMatch","match","toLowerCase","createNodesFromMarkup","handleScript","node","process","env","NODE_ENV","undefined","nodeName","wrap","innerHTML","wrapDepth","lastChild","scripts","getElementsByTagName","length","forEach","nodes","childNodes","removeChild","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAYA;;AAEA;;AAEA,IAAIA,uBAAuBC,QAAQ,wBAAR,CAA3B;;AAEA,IAAIC,uBAAuBD,QAAQ,wBAAR,CAA3B;AACA,IAAIE,gBAAgBF,QAAQ,iBAAR,CAApB;AACA,IAAIG,YAAYH,QAAQ,aAAR,CAAhB;;AAEA;;;AAGA,IAAII,YAAYL,qBAAqBM,SAArB,GAAiCC,SAASC,aAAT,CAAuB,KAAvB,CAAjC,GAAiE,IAAjF;;AAEA;;;AAGA,IAAIC,kBAAkB,YAAtB;;AAEA;;;;;;AAMA,SAASC,WAAT,CAAqBC,MAArB,EAA6B;AAC3B,MAAIC,gBAAgBD,OAAOE,KAAP,CAAaJ,eAAb,CAApB;AACA,SAAOG,iBAAiBA,cAAc,CAAd,EAAiBE,WAAjB,EAAxB;AACD;;AAED;;;;;;;;;;AAUA,SAASC,qBAAT,CAA+BJ,MAA/B,EAAuCK,YAAvC,EAAqD;AACnD,MAAIC,OAAOZ,SAAX;AACA,GAAC,CAAC,CAACA,SAAH,GAAea,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwChB,UAAU,KAAV,EAAiB,6CAAjB,CAAxC,GAA0GA,UAAU,KAAV,CAAzH,GAA4IiB,SAA5I;AACA,MAAIC,WAAWZ,YAAYC,MAAZ,CAAf;;AAEA,MAAIY,OAAOD,YAAYnB,cAAcmB,QAAd,CAAvB;AACA,MAAIC,IAAJ,EAAU;AACRN,SAAKO,SAAL,GAAiBD,KAAK,CAAL,IAAUZ,MAAV,GAAmBY,KAAK,CAAL,CAApC;;AAEA,QAAIE,YAAYF,KAAK,CAAL,CAAhB;AACA,WAAOE,WAAP,EAAoB;AAClBR,aAAOA,KAAKS,SAAZ;AACD;AACF,GAPD,MAOO;AACLT,SAAKO,SAAL,GAAiBb,MAAjB;AACD;;AAED,MAAIgB,UAAUV,KAAKW,oBAAL,CAA0B,QAA1B,CAAd;AACA,MAAID,QAAQE,MAAZ,EAAoB;AAClB,KAACb,YAAD,GAAgBE,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwChB,UAAU,KAAV,EAAiB,mEAAjB,CAAxC,GAAgIA,UAAU,KAAV,CAAhJ,GAAmKiB,SAAnK;AACAnB,yBAAqByB,OAArB,EAA8BG,OAA9B,CAAsCd,YAAtC;AACD;;AAED,MAAIe,QAAQ7B,qBAAqBe,KAAKe,UAA1B,CAAZ;AACA,SAAOf,KAAKS,SAAZ,EAAuB;AACrBT,SAAKgB,WAAL,CAAiBhB,KAAKS,SAAtB;AACD;AACD,SAAOK,KAAP;AACD;;AAEDG,OAAOC,OAAP,GAAiBpB,qBAAjB","file":"createNodesFromMarkup.js","sourceRoot":"/Users/mo/serverless-software","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule createNodesFromMarkup\n * @typechecks\n */\n\n/*eslint-disable fb-www/unsafe-html*/\n\n'use strict';\n\nvar ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar createArrayFromMixed = require('./createArrayFromMixed');\nvar getMarkupWrap = require('./getMarkupWrap');\nvar invariant = require('./invariant');\n\n/**\n * Dummy container used to render all markup.\n */\nvar dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;\n\n/**\n * Pattern used by `getNodeName`.\n */\nvar nodeNamePattern = /^\\s*<(\\w+)/;\n\n/**\n * Extracts the `nodeName` of the first element in a string of markup.\n *\n * @param {string} markup String of markup.\n * @return {?string} Node name of the supplied markup.\n */\nfunction getNodeName(markup) {\n  var nodeNameMatch = markup.match(nodeNamePattern);\n  return nodeNameMatch && nodeNameMatch[1].toLowerCase();\n}\n\n/**\n * Creates an array containing the nodes rendered from the supplied markup. The\n * optionally supplied `handleScript` function will be invoked once for each\n * <script> element that is rendered. If no `handleScript` function is supplied,\n * an exception is thrown if any <script> elements are rendered.\n *\n * @param {string} markup A string of valid HTML markup.\n * @param {?function} handleScript Invoked once for each rendered <script>.\n * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.\n */\nfunction createNodesFromMarkup(markup, handleScript) {\n  var node = dummyNode;\n  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;\n  var nodeName = getNodeName(markup);\n\n  var wrap = nodeName && getMarkupWrap(nodeName);\n  if (wrap) {\n    node.innerHTML = wrap[1] + markup + wrap[2];\n\n    var wrapDepth = wrap[0];\n    while (wrapDepth--) {\n      node = node.lastChild;\n    }\n  } else {\n    node.innerHTML = markup;\n  }\n\n  var scripts = node.getElementsByTagName('script');\n  if (scripts.length) {\n    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;\n    createArrayFromMixed(scripts).forEach(handleScript);\n  }\n\n  var nodes = createArrayFromMixed(node.childNodes);\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n  return nodes;\n}\n\nmodule.exports = createNodesFromMarkup;"]}