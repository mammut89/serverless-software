{"version":3,"sources":["node_modules/react/lib/ReactDOMIDOperations.js"],"names":["DOMChildrenOperations","require","DOMPropertyOperations","ReactMount","ReactPerf","invariant","INVALID_PROPERTY_ERRORS","dangerouslySetInnerHTML","style","ReactDOMIDOperations","updatePropertyByID","id","name","value","node","getNode","hasOwnProperty","process","env","NODE_ENV","undefined","setValueForProperty","deleteValueForProperty","dangerouslyReplaceNodeWithMarkupByID","markup","dangerouslyReplaceNodeWithMarkup","dangerouslyProcessChildrenUpdates","updates","i","length","parentNode","parentID","processUpdates","measureMethods","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAYA;;AAEA,IAAIA,wBAAwBC,QAAQ,yBAAR,CAA5B;AACA,IAAIC,wBAAwBD,QAAQ,yBAAR,CAA5B;AACA,IAAIE,aAAaF,QAAQ,cAAR,CAAjB;AACA,IAAIG,YAAYH,QAAQ,aAAR,CAAhB;;AAEA,IAAII,YAAYJ,QAAQ,oBAAR,CAAhB;;AAEA;;;;;;AAMA,IAAIK,0BAA0B;AAC5BC,2BAAyB,sEADG;AAE5BC,SAAO;AAFqB,CAA9B;;AAKA;;;AAGA,IAAIC,uBAAuB;;AAEzB;;;;;;;;;AASAC,sBAAoB,4BAAUC,EAAV,EAAcC,IAAd,EAAoBC,KAApB,EAA2B;AAC7C,QAAIC,OAAOX,WAAWY,OAAX,CAAmBJ,EAAnB,CAAX;AACA,KAAC,CAACL,wBAAwBU,cAAxB,CAAuCJ,IAAvC,CAAF,GAAiDK,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCd,UAAU,KAAV,EAAiB,6BAAjB,EAAgDC,wBAAwBM,IAAxB,CAAhD,CAAxC,GAAyHP,UAAU,KAAV,CAA1K,GAA6Le,SAA7L;;AAEA;AACA;AACA;AACA,QAAIP,SAAS,IAAb,EAAmB;AACjBX,4BAAsBmB,mBAAtB,CAA0CP,IAA1C,EAAgDF,IAAhD,EAAsDC,KAAtD;AACD,KAFD,MAEO;AACLX,4BAAsBoB,sBAAtB,CAA6CR,IAA7C,EAAmDF,IAAnD;AACD;AACF,GAvBwB;;AAyBzB;;;;;;;;AAQAW,wCAAsC,8CAAUZ,EAAV,EAAca,MAAd,EAAsB;AAC1D,QAAIV,OAAOX,WAAWY,OAAX,CAAmBJ,EAAnB,CAAX;AACAX,0BAAsByB,gCAAtB,CAAuDX,IAAvD,EAA6DU,MAA7D;AACD,GApCwB;;AAsCzB;;;;;;;AAOAE,qCAAmC,2CAAUC,OAAV,EAAmBH,MAAnB,EAA2B;AAC5D,SAAK,IAAII,IAAI,CAAb,EAAgBA,IAAID,QAAQE,MAA5B,EAAoCD,GAApC,EAAyC;AACvCD,cAAQC,CAAR,EAAWE,UAAX,GAAwB3B,WAAWY,OAAX,CAAmBY,QAAQC,CAAR,EAAWG,QAA9B,CAAxB;AACD;AACD/B,0BAAsBgC,cAAtB,CAAqCL,OAArC,EAA8CH,MAA9C;AACD;AAlDwB,CAA3B;;AAqDApB,UAAU6B,cAAV,CAAyBxB,oBAAzB,EAA+C,sBAA/C,EAAuE;AACrEc,wCAAsC,sCAD+B;AAErEG,qCAAmC;AAFkC,CAAvE;;AAKAQ,OAAOC,OAAP,GAAiB1B,oBAAjB","file":"ReactDOMIDOperations.js","sourceRoot":"/Users/mo/serverless-software","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMIDOperations\n * @typechecks static-only\n */\n\n'use strict';\n\nvar DOMChildrenOperations = require('./DOMChildrenOperations');\nvar DOMPropertyOperations = require('./DOMPropertyOperations');\nvar ReactMount = require('./ReactMount');\nvar ReactPerf = require('./ReactPerf');\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Errors for properties that should not be updated with `updatePropertyByID()`.\n *\n * @type {object}\n * @private\n */\nvar INVALID_PROPERTY_ERRORS = {\n  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',\n  style: '`style` must be set using `updateStylesByID()`.'\n};\n\n/**\n * Operations used to process updates to DOM nodes.\n */\nvar ReactDOMIDOperations = {\n\n  /**\n   * Updates a DOM node with new property values. This should only be used to\n   * update DOM properties in `DOMProperty`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} name A valid property name, see `DOMProperty`.\n   * @param {*} value New value of the property.\n   * @internal\n   */\n  updatePropertyByID: function (id, name, value) {\n    var node = ReactMount.getNode(id);\n    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;\n\n    // If we're updating to null or undefined, we should remove the property\n    // from the DOM node instead of inadvertantly setting to a string. This\n    // brings us in line with the same behavior we have on initial render.\n    if (value != null) {\n      DOMPropertyOperations.setValueForProperty(node, name, value);\n    } else {\n      DOMPropertyOperations.deleteValueForProperty(node, name);\n    }\n  },\n\n  /**\n   * Replaces a DOM node that exists in the document with markup.\n   *\n   * @param {string} id ID of child to be replaced.\n   * @param {string} markup Dangerous markup to inject in place of child.\n   * @internal\n   * @see {Danger.dangerouslyReplaceNodeWithMarkup}\n   */\n  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {\n    var node = ReactMount.getNode(id);\n    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);\n  },\n\n  /**\n   * Updates a component's children by processing a series of updates.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @param {array<string>} markup List of markup strings.\n   * @internal\n   */\n  dangerouslyProcessChildrenUpdates: function (updates, markup) {\n    for (var i = 0; i < updates.length; i++) {\n      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);\n    }\n    DOMChildrenOperations.processUpdates(updates, markup);\n  }\n};\n\nReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {\n  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',\n  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'\n});\n\nmodule.exports = ReactDOMIDOperations;"]}