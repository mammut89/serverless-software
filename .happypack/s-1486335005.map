{"version":3,"sources":["node_modules/react/lib/findDOMNode.js"],"names":["ReactCurrentOwner","require","ReactInstanceMap","ReactMount","invariant","warning","findDOMNode","componentOrElement","process","env","NODE_ENV","owner","current","_warnedAboutRefsInRender","getName","undefined","nodeType","has","getNodeFromInstance","render","Object","keys","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAYA;;AAEA,IAAIA,oBAAoBC,QAAQ,qBAAR,CAAxB;AACA,IAAIC,mBAAmBD,QAAQ,oBAAR,CAAvB;AACA,IAAIE,aAAaF,QAAQ,cAAR,CAAjB;;AAEA,IAAIG,YAAYH,QAAQ,oBAAR,CAAhB;AACA,IAAII,UAAUJ,QAAQ,kBAAR,CAAd;;AAEA;;;;;;AAMA,SAASK,WAAT,CAAqBC,kBAArB,EAAyC;AACvC,MAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,QAAIC,QAAQX,kBAAkBY,OAA9B;AACA,QAAID,UAAU,IAAd,EAAoB;AAClBH,cAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCL,QAAQM,MAAME,wBAAd,EAAwC,oEAAoE,mEAApE,GAA0I,oEAA1I,GAAiN,iEAAjN,GAAqR,6BAA7T,EAA4VF,MAAMG,OAAN,MAAmB,aAA/W,CAAxC,GAAwaC,SAAxa;AACAJ,YAAME,wBAAN,GAAiC,IAAjC;AACD;AACF;AACD,MAAIN,sBAAsB,IAA1B,EAAgC;AAC9B,WAAO,IAAP;AACD;AACD,MAAIA,mBAAmBS,QAAnB,KAAgC,CAApC,EAAuC;AACrC,WAAOT,kBAAP;AACD;AACD,MAAIL,iBAAiBe,GAAjB,CAAqBV,kBAArB,CAAJ,EAA8C;AAC5C,WAAOJ,WAAWe,mBAAX,CAA+BX,kBAA/B,CAAP;AACD;AACD,IAAEA,mBAAmBY,MAAnB,IAA6B,IAA7B,IAAqC,OAAOZ,mBAAmBY,MAA1B,KAAqC,UAA5E,IAA0FX,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCN,UAAU,KAAV,EAAiB,mDAAjB,CAAxC,GAAgHA,UAAU,KAAV,CAA1M,GAA6NW,SAA7N;AACA,GAAC,KAAD,GAASP,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCN,UAAU,KAAV,EAAiB,qEAAjB,EAAwFgB,OAAOC,IAAP,CAAYd,kBAAZ,CAAxF,CAAxC,GAAmKH,UAAU,KAAV,CAA5K,GAA+LW,SAA/L;AACD;;AAEDO,OAAOC,OAAP,GAAiBjB,WAAjB","file":"findDOMNode.js","sourceRoot":"/Users/mo/serverless-software","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule findDOMNode\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactInstanceMap = require('./ReactInstanceMap');\nvar ReactMount = require('./ReactMount');\n\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * Returns the DOM node rendered by this element.\n *\n * @param {ReactComponent|DOMElement} componentOrElement\n * @return {?DOMElement} The root node of this element.\n */\nfunction findDOMNode(componentOrElement) {\n  if (process.env.NODE_ENV !== 'production') {\n    var owner = ReactCurrentOwner.current;\n    if (owner !== null) {\n      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;\n      owner._warnedAboutRefsInRender = true;\n    }\n  }\n  if (componentOrElement == null) {\n    return null;\n  }\n  if (componentOrElement.nodeType === 1) {\n    return componentOrElement;\n  }\n  if (ReactInstanceMap.has(componentOrElement)) {\n    return ReactMount.getNodeFromInstance(componentOrElement);\n  }\n  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;\n  !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;\n}\n\nmodule.exports = findDOMNode;"]}