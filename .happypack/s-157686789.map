{"version":3,"sources":["node_modules/react/lib/EventPluginHub.js"],"names":["EventPluginRegistry","require","EventPluginUtils","ReactErrorUtils","accumulateInto","forEachAccumulated","invariant","warning","listenerBank","eventQueue","executeDispatchesAndRelease","event","simulated","executeDispatchesInOrder","isPersistent","constructor","release","executeDispatchesAndReleaseSimulated","e","executeDispatchesAndReleaseTopLevel","InstanceHandle","validateInstanceHandle","valid","traverseTwoPhase","traverseEnterLeave","process","env","NODE_ENV","undefined","EventPluginHub","injection","injectMount","injectInstanceHandle","InjectedInstanceHandle","getInstanceHandle","injectEventPluginOrder","injectEventPluginsByName","eventNameDispatchConfigs","registrationNameModules","putListener","id","registrationName","listener","bankForRegistrationName","PluginModule","didPutListener","getListener","deleteListener","willDeleteListener","deleteAllListeners","extractEvents","topLevelType","topLevelTarget","topLevelTargetID","nativeEvent","nativeEventTarget","events","plugins","i","length","possiblePlugin","extractedEvents","enqueueEvents","processEventQueue","processingEventQueue","rethrowCaughtError","__purge","__getListenerBank","module","exports"],"mappings":"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","file":"EventPluginHub.js","sourceRoot":"/Users/mo/serverless-software","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginHub\n */\n\n'use strict';\n\nvar EventPluginRegistry = require('./EventPluginRegistry');\nvar EventPluginUtils = require('./EventPluginUtils');\nvar ReactErrorUtils = require('./ReactErrorUtils');\n\nvar accumulateInto = require('./accumulateInto');\nvar forEachAccumulated = require('./forEachAccumulated');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * Internal store for event listeners\n */\nvar listenerBank = {};\n\n/**\n * Internal queue of events that have accumulated their dispatches and are\n * waiting to have their dispatches executed.\n */\nvar eventQueue = null;\n\n/**\n * Dispatches an event and releases it back into the pool, unless persistent.\n *\n * @param {?object} event Synthetic event to be dispatched.\n * @param {boolean} simulated If the event is simulated (changes exn behavior)\n * @private\n */\nvar executeDispatchesAndRelease = function (event, simulated) {\n  if (event) {\n    EventPluginUtils.executeDispatchesInOrder(event, simulated);\n\n    if (!event.isPersistent()) {\n      event.constructor.release(event);\n    }\n  }\n};\nvar executeDispatchesAndReleaseSimulated = function (e) {\n  return executeDispatchesAndRelease(e, true);\n};\nvar executeDispatchesAndReleaseTopLevel = function (e) {\n  return executeDispatchesAndRelease(e, false);\n};\n\n/**\n * - `InstanceHandle`: [required] Module that performs logical traversals of DOM\n *   hierarchy given ids of the logical DOM elements involved.\n */\nvar InstanceHandle = null;\n\nfunction validateInstanceHandle() {\n  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;\n  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;\n}\n\n/**\n * This is a unified interface for event plugins to be installed and configured.\n *\n * Event plugins can implement the following properties:\n *\n *   `extractEvents` {function(string, DOMEventTarget, string, object): *}\n *     Required. When a top-level event is fired, this method is expected to\n *     extract synthetic events that will in turn be queued and dispatched.\n *\n *   `eventTypes` {object}\n *     Optional, plugins that fire events must publish a mapping of registration\n *     names that are used to register listeners. Values of this mapping must\n *     be objects that contain `registrationName` or `phasedRegistrationNames`.\n *\n *   `executeDispatch` {function(object, function, string)}\n *     Optional, allows plugins to override how an event gets dispatched. By\n *     default, the listener is simply invoked.\n *\n * Each plugin that is injected into `EventsPluginHub` is immediately operable.\n *\n * @public\n */\nvar EventPluginHub = {\n\n  /**\n   * Methods for injecting dependencies.\n   */\n  injection: {\n\n    /**\n     * @param {object} InjectedMount\n     * @public\n     */\n    injectMount: EventPluginUtils.injection.injectMount,\n\n    /**\n     * @param {object} InjectedInstanceHandle\n     * @public\n     */\n    injectInstanceHandle: function (InjectedInstanceHandle) {\n      InstanceHandle = InjectedInstanceHandle;\n      if (process.env.NODE_ENV !== 'production') {\n        validateInstanceHandle();\n      }\n    },\n\n    getInstanceHandle: function () {\n      if (process.env.NODE_ENV !== 'production') {\n        validateInstanceHandle();\n      }\n      return InstanceHandle;\n    },\n\n    /**\n     * @param {array} InjectedEventPluginOrder\n     * @public\n     */\n    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,\n\n    /**\n     * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n     */\n    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName\n\n  },\n\n  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,\n\n  registrationNameModules: EventPluginRegistry.registrationNameModules,\n\n  /**\n   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @param {?function} listener The callback to store.\n   */\n  putListener: function (id, registrationName, listener) {\n    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;\n\n    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});\n    bankForRegistrationName[id] = listener;\n\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n    if (PluginModule && PluginModule.didPutListener) {\n      PluginModule.didPutListener(id, registrationName, listener);\n    }\n  },\n\n  /**\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @return {?function} The stored callback.\n   */\n  getListener: function (id, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n    return bankForRegistrationName && bankForRegistrationName[id];\n  },\n\n  /**\n   * Deletes a listener from the registration bank.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   */\n  deleteListener: function (id, registrationName) {\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n    if (PluginModule && PluginModule.willDeleteListener) {\n      PluginModule.willDeleteListener(id, registrationName);\n    }\n\n    var bankForRegistrationName = listenerBank[registrationName];\n    // TODO: This should never be null -- when is it?\n    if (bankForRegistrationName) {\n      delete bankForRegistrationName[id];\n    }\n  },\n\n  /**\n   * Deletes all listeners for the DOM element with the supplied ID.\n   *\n   * @param {string} id ID of the DOM element.\n   */\n  deleteAllListeners: function (id) {\n    for (var registrationName in listenerBank) {\n      if (!listenerBank[registrationName][id]) {\n        continue;\n      }\n\n      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n      if (PluginModule && PluginModule.willDeleteListener) {\n        PluginModule.willDeleteListener(id, registrationName);\n      }\n\n      delete listenerBank[registrationName][id];\n    }\n  },\n\n  /**\n   * Allows registered plugins an opportunity to extract events from top-level\n   * native browser events.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @internal\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    var events;\n    var plugins = EventPluginRegistry.plugins;\n    for (var i = 0; i < plugins.length; i++) {\n      // Not every plugin in the ordering may be loaded at runtime.\n      var possiblePlugin = plugins[i];\n      if (possiblePlugin) {\n        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);\n        if (extractedEvents) {\n          events = accumulateInto(events, extractedEvents);\n        }\n      }\n    }\n    return events;\n  },\n\n  /**\n   * Enqueues a synthetic event that should be dispatched when\n   * `processEventQueue` is invoked.\n   *\n   * @param {*} events An accumulation of synthetic events.\n   * @internal\n   */\n  enqueueEvents: function (events) {\n    if (events) {\n      eventQueue = accumulateInto(eventQueue, events);\n    }\n  },\n\n  /**\n   * Dispatches all synthetic events on the event queue.\n   *\n   * @internal\n   */\n  processEventQueue: function (simulated) {\n    // Set `eventQueue` to null before processing it so that we can tell if more\n    // events get enqueued while processing.\n    var processingEventQueue = eventQueue;\n    eventQueue = null;\n    if (simulated) {\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);\n    } else {\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);\n    }\n    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;\n    // This would be a good time to rethrow if any of the event handlers threw.\n    ReactErrorUtils.rethrowCaughtError();\n  },\n\n  /**\n   * These are needed for tests only. Do not use!\n   */\n  __purge: function () {\n    listenerBank = {};\n  },\n\n  __getListenerBank: function () {\n    return listenerBank;\n  }\n\n};\n\nmodule.exports = EventPluginHub;"]}