{"version":3,"sources":["node_modules/react/lib/SelectEventPlugin.js"],"names":["EventConstants","require","EventPropagators","ExecutionEnvironment","ReactInputSelection","SyntheticEvent","getActiveElement","isTextInputElement","keyOf","shallowEqual","topLevelTypes","skipSelectionChangeEvent","canUseDOM","document","documentMode","eventTypes","select","phasedRegistrationNames","bubbled","onSelect","captured","onSelectCapture","dependencies","topBlur","topContextMenu","topFocus","topKeyDown","topMouseDown","topMouseUp","topSelectionChange","activeElement","activeElementID","lastSelection","mouseDown","hasListener","ON_SELECT_KEY","getSelection","node","hasSelectionCapabilities","start","selectionStart","end","selectionEnd","window","selection","anchorNode","anchorOffset","focusNode","focusOffset","range","createRange","parentElement","text","top","boundingTop","left","boundingLeft","constructSelectEvent","nativeEvent","nativeEventTarget","currentSelection","syntheticEvent","getPooled","type","target","accumulateTwoPhaseDispatches","SelectEventPlugin","extractEvents","topLevelType","topLevelTarget","topLevelTargetID","contentEditable","topKeyUp","didPutListener","id","registrationName","listener","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAWA;;AAEA,IAAIA,iBAAiBC,QAAQ,kBAAR,CAArB;AACA,IAAIC,mBAAmBD,QAAQ,oBAAR,CAAvB;AACA,IAAIE,uBAAuBF,QAAQ,+BAAR,CAA3B;AACA,IAAIG,sBAAsBH,QAAQ,uBAAR,CAA1B;AACA,IAAII,iBAAiBJ,QAAQ,kBAAR,CAArB;;AAEA,IAAIK,mBAAmBL,QAAQ,2BAAR,CAAvB;AACA,IAAIM,qBAAqBN,QAAQ,sBAAR,CAAzB;AACA,IAAIO,QAAQP,QAAQ,gBAAR,CAAZ;AACA,IAAIQ,eAAeR,QAAQ,uBAAR,CAAnB;;AAEA,IAAIS,gBAAgBV,eAAeU,aAAnC;;AAEA,IAAIC,2BAA2BR,qBAAqBS,SAArB,IAAkC,kBAAkBC,QAApD,IAAgEA,SAASC,YAAT,IAAyB,EAAxH;;AAEA,IAAIC,aAAa;AACfC,UAAQ;AACNC,6BAAyB;AACvBC,eAASV,MAAM,EAAEW,UAAU,IAAZ,EAAN,CADc;AAEvBC,gBAAUZ,MAAM,EAAEa,iBAAiB,IAAnB,EAAN;AAFa,KADnB;AAKNC,kBAAc,CAACZ,cAAca,OAAf,EAAwBb,cAAcc,cAAtC,EAAsDd,cAAce,QAApE,EAA8Ef,cAAcgB,UAA5F,EAAwGhB,cAAciB,YAAtH,EAAoIjB,cAAckB,UAAlJ,EAA8JlB,cAAcmB,kBAA5K;AALR;AADO,CAAjB;;AAUA,IAAIC,gBAAgB,IAApB;AACA,IAAIC,kBAAkB,IAAtB;AACA,IAAIC,gBAAgB,IAApB;AACA,IAAIC,YAAY,KAAhB;;AAEA;AACA;AACA,IAAIC,cAAc,KAAlB;AACA,IAAIC,gBAAgB3B,MAAM,EAAEW,UAAU,IAAZ,EAAN,CAApB;;AAEA;;;;;;;;;AASA,SAASiB,YAAT,CAAsBC,IAAtB,EAA4B;AAC1B,MAAI,oBAAoBA,IAApB,IAA4BjC,oBAAoBkC,wBAApB,CAA6CD,IAA7C,CAAhC,EAAoF;AAClF,WAAO;AACLE,aAAOF,KAAKG,cADP;AAELC,WAAKJ,KAAKK;AAFL,KAAP;AAID,GALD,MAKO,IAAIC,OAAOP,YAAX,EAAyB;AAC9B,QAAIQ,YAAYD,OAAOP,YAAP,EAAhB;AACA,WAAO;AACLS,kBAAYD,UAAUC,UADjB;AAELC,oBAAcF,UAAUE,YAFnB;AAGLC,iBAAWH,UAAUG,SAHhB;AAILC,mBAAaJ,UAAUI;AAJlB,KAAP;AAMD,GARM,MAQA,IAAInC,SAAS+B,SAAb,EAAwB;AAC7B,QAAIK,QAAQpC,SAAS+B,SAAT,CAAmBM,WAAnB,EAAZ;AACA,WAAO;AACLC,qBAAeF,MAAME,aAAN,EADV;AAELC,YAAMH,MAAMG,IAFP;AAGLC,WAAKJ,MAAMK,WAHN;AAILC,YAAMN,MAAMO;AAJP,KAAP;AAMD;AACF;;AAED;;;;;;AAMA,SAASC,oBAAT,CAA8BC,WAA9B,EAA2CC,iBAA3C,EAA8D;AAC5D;AACA;AACA;AACA;AACA,MAAI1B,aAAaH,iBAAiB,IAA9B,IAAsCA,kBAAkBxB,kBAA5D,EAAgF;AAC9E,WAAO,IAAP;AACD;;AAED;AACA,MAAIsD,mBAAmBxB,aAAaN,aAAb,CAAvB;AACA,MAAI,CAACE,aAAD,IAAkB,CAACvB,aAAauB,aAAb,EAA4B4B,gBAA5B,CAAvB,EAAsE;AACpE5B,oBAAgB4B,gBAAhB;;AAEA,QAAIC,iBAAiBxD,eAAeyD,SAAf,CAAyB/C,WAAWC,MAApC,EAA4Ce,eAA5C,EAA6D2B,WAA7D,EAA0EC,iBAA1E,CAArB;;AAEAE,mBAAeE,IAAf,GAAsB,QAAtB;AACAF,mBAAeG,MAAf,GAAwBlC,aAAxB;;AAEA5B,qBAAiB+D,4BAAjB,CAA8CJ,cAA9C;;AAEA,WAAOA,cAAP;AACD;;AAED,SAAO,IAAP;AACD;;AAED;;;;;;;;;;;;;;AAcA,IAAIK,oBAAoB;;AAEtBnD,cAAYA,UAFU;;AAItB;;;;;;;;AAQAoD,iBAAe,uBAAUC,YAAV,EAAwBC,cAAxB,EAAwCC,gBAAxC,EAA0DZ,WAA1D,EAAuEC,iBAAvE,EAA0F;AACvG,QAAI,CAACzB,WAAL,EAAkB;AAChB,aAAO,IAAP;AACD;;AAED,YAAQkC,YAAR;AACE;AACA,WAAK1D,cAAce,QAAnB;AACE,YAAIlB,mBAAmB8D,cAAnB,KAAsCA,eAAeE,eAAf,KAAmC,MAA7E,EAAqF;AACnFzC,0BAAgBuC,cAAhB;AACAtC,4BAAkBuC,gBAAlB;AACAtC,0BAAgB,IAAhB;AACD;AACD;AACF,WAAKtB,cAAca,OAAnB;AACEO,wBAAgB,IAAhB;AACAC,0BAAkB,IAAlB;AACAC,wBAAgB,IAAhB;AACA;;AAEF;AACA;AACA,WAAKtB,cAAciB,YAAnB;AACEM,oBAAY,IAAZ;AACA;AACF,WAAKvB,cAAcc,cAAnB;AACA,WAAKd,cAAckB,UAAnB;AACEK,oBAAY,KAAZ;AACA,eAAOwB,qBAAqBC,WAArB,EAAkCC,iBAAlC,CAAP;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAKjD,cAAcmB,kBAAnB;AACE,YAAIlB,wBAAJ,EAA8B;AAC5B;AACD;AACH;AACA,WAAKD,cAAcgB,UAAnB;AACA,WAAKhB,cAAc8D,QAAnB;AACE,eAAOf,qBAAqBC,WAArB,EAAkCC,iBAAlC,CAAP;AAzCJ;;AA4CA,WAAO,IAAP;AACD,GA9DqB;;AAgEtBc,kBAAgB,wBAAUC,EAAV,EAAcC,gBAAd,EAAgCC,QAAhC,EAA0C;AACxD,QAAID,qBAAqBxC,aAAzB,EAAwC;AACtCD,oBAAc,IAAd;AACD;AACF;AApEqB,CAAxB;;AAuEA2C,OAAOC,OAAP,GAAiBZ,iBAAjB","file":"SelectEventPlugin.js","sourceRoot":"/Users/mo/serverless-software","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SelectEventPlugin\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPropagators = require('./EventPropagators');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar ReactInputSelection = require('./ReactInputSelection');\nvar SyntheticEvent = require('./SyntheticEvent');\n\nvar getActiveElement = require('fbjs/lib/getActiveElement');\nvar isTextInputElement = require('./isTextInputElement');\nvar keyOf = require('fbjs/lib/keyOf');\nvar shallowEqual = require('fbjs/lib/shallowEqual');\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nvar skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;\n\nvar eventTypes = {\n  select: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onSelect: null }),\n      captured: keyOf({ onSelectCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]\n  }\n};\n\nvar activeElement = null;\nvar activeElementID = null;\nvar lastSelection = null;\nvar mouseDown = false;\n\n// Track whether a listener exists for this plugin. If none exist, we do\n// not extract events.\nvar hasListener = false;\nvar ON_SELECT_KEY = keyOf({ onSelect: null });\n\n/**\n * Get an object which is a unique representation of the current selection.\n *\n * The return value will not be consistent across nodes or browsers, but\n * two identical selections on the same node will return identical objects.\n *\n * @param {DOMElement} node\n * @return {object}\n */\nfunction getSelection(node) {\n  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {\n    return {\n      start: node.selectionStart,\n      end: node.selectionEnd\n    };\n  } else if (window.getSelection) {\n    var selection = window.getSelection();\n    return {\n      anchorNode: selection.anchorNode,\n      anchorOffset: selection.anchorOffset,\n      focusNode: selection.focusNode,\n      focusOffset: selection.focusOffset\n    };\n  } else if (document.selection) {\n    var range = document.selection.createRange();\n    return {\n      parentElement: range.parentElement(),\n      text: range.text,\n      top: range.boundingTop,\n      left: range.boundingLeft\n    };\n  }\n}\n\n/**\n * Poll selection to see whether it's changed.\n *\n * @param {object} nativeEvent\n * @return {?SyntheticEvent}\n */\nfunction constructSelectEvent(nativeEvent, nativeEventTarget) {\n  // Ensure we have the right element, and that the user is not dragging a\n  // selection (this matches native `select` event behavior). In HTML5, select\n  // fires only on input and textarea thus if there's no focused element we\n  // won't dispatch.\n  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {\n    return null;\n  }\n\n  // Only fire when selection has actually changed.\n  var currentSelection = getSelection(activeElement);\n  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {\n    lastSelection = currentSelection;\n\n    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);\n\n    syntheticEvent.type = 'select';\n    syntheticEvent.target = activeElement;\n\n    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);\n\n    return syntheticEvent;\n  }\n\n  return null;\n}\n\n/**\n * This plugin creates an `onSelect` event that normalizes select events\n * across form elements.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - contentEditable\n *\n * This differs from native browser implementations in the following ways:\n * - Fires on contentEditable fields as well as inputs.\n * - Fires for collapsed selection.\n * - Fires after user input.\n */\nvar SelectEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    if (!hasListener) {\n      return null;\n    }\n\n    switch (topLevelType) {\n      // Track the input node that has focus.\n      case topLevelTypes.topFocus:\n        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {\n          activeElement = topLevelTarget;\n          activeElementID = topLevelTargetID;\n          lastSelection = null;\n        }\n        break;\n      case topLevelTypes.topBlur:\n        activeElement = null;\n        activeElementID = null;\n        lastSelection = null;\n        break;\n\n      // Don't fire the event while the user is dragging. This matches the\n      // semantics of the native select event.\n      case topLevelTypes.topMouseDown:\n        mouseDown = true;\n        break;\n      case topLevelTypes.topContextMenu:\n      case topLevelTypes.topMouseUp:\n        mouseDown = false;\n        return constructSelectEvent(nativeEvent, nativeEventTarget);\n\n      // Chrome and IE fire non-standard event when selection is changed (and\n      // sometimes when it hasn't). IE's event fires out of order with respect\n      // to key and input events on deletion, so we discard it.\n      //\n      // Firefox doesn't support selectionchange, so check selection status\n      // after each key entry. The selection changes after keydown and before\n      // keyup, but we check on keydown as well in the case of holding down a\n      // key, when multiple keydown events are fired but only one keyup is.\n      // This is also our approach for IE handling, for the reason above.\n      case topLevelTypes.topSelectionChange:\n        if (skipSelectionChangeEvent) {\n          break;\n        }\n      // falls through\n      case topLevelTypes.topKeyDown:\n      case topLevelTypes.topKeyUp:\n        return constructSelectEvent(nativeEvent, nativeEventTarget);\n    }\n\n    return null;\n  },\n\n  didPutListener: function (id, registrationName, listener) {\n    if (registrationName === ON_SELECT_KEY) {\n      hasListener = true;\n    }\n  }\n};\n\nmodule.exports = SelectEventPlugin;"]}