{"version":3,"sources":["node_modules/react/lib/ReactInputSelection.js"],"names":["ReactDOMSelection","require","containsNode","focusNode","getActiveElement","isInDocument","node","document","documentElement","ReactInputSelection","hasSelectionCapabilities","elem","nodeName","toLowerCase","type","contentEditable","getSelectionInformation","focusedElem","selectionRange","getSelection","restoreSelection","priorSelectionInformation","curFocusedElem","priorFocusedElem","priorSelectionRange","setSelection","input","selection","start","selectionStart","end","selectionEnd","range","createRange","parentElement","moveStart","value","length","moveEnd","getOffsets","offsets","Math","min","createTextRange","collapse","select","setOffsets","module","exports"],"mappings":"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","file":"ReactInputSelection.js","sourceRoot":"/Users/mo/serverless-software","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactInputSelection\n */\n\n'use strict';\n\nvar ReactDOMSelection = require('./ReactDOMSelection');\n\nvar containsNode = require('fbjs/lib/containsNode');\nvar focusNode = require('fbjs/lib/focusNode');\nvar getActiveElement = require('fbjs/lib/getActiveElement');\n\nfunction isInDocument(node) {\n  return containsNode(document.documentElement, node);\n}\n\n/**\n * @ReactInputSelection: React input selection module. Based on Selection.js,\n * but modified to be suitable for react and has a couple of bug fixes (doesn't\n * assume buttons have range selections allowed).\n * Input selection module for React.\n */\nvar ReactInputSelection = {\n\n  hasSelectionCapabilities: function (elem) {\n    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();\n    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');\n  },\n\n  getSelectionInformation: function () {\n    var focusedElem = getActiveElement();\n    return {\n      focusedElem: focusedElem,\n      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null\n    };\n  },\n\n  /**\n   * @restoreSelection: If any selection information was potentially lost,\n   * restore it. This is useful when performing operations that could remove dom\n   * nodes and place them back in, resulting in focus being lost.\n   */\n  restoreSelection: function (priorSelectionInformation) {\n    var curFocusedElem = getActiveElement();\n    var priorFocusedElem = priorSelectionInformation.focusedElem;\n    var priorSelectionRange = priorSelectionInformation.selectionRange;\n    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {\n      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {\n        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);\n      }\n      focusNode(priorFocusedElem);\n    }\n  },\n\n  /**\n   * @getSelection: Gets the selection bounds of a focused textarea, input or\n   * contentEditable node.\n   * -@input: Look up selection bounds of this input\n   * -@return {start: selectionStart, end: selectionEnd}\n   */\n  getSelection: function (input) {\n    var selection;\n\n    if ('selectionStart' in input) {\n      // Modern browser with input or textarea.\n      selection = {\n        start: input.selectionStart,\n        end: input.selectionEnd\n      };\n    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {\n      // IE8 input.\n      var range = document.selection.createRange();\n      // There can only be one selection per document in IE, so it must\n      // be in our element.\n      if (range.parentElement() === input) {\n        selection = {\n          start: -range.moveStart('character', -input.value.length),\n          end: -range.moveEnd('character', -input.value.length)\n        };\n      }\n    } else {\n      // Content editable or old IE textarea.\n      selection = ReactDOMSelection.getOffsets(input);\n    }\n\n    return selection || { start: 0, end: 0 };\n  },\n\n  /**\n   * @setSelection: Sets the selection bounds of a textarea or input and focuses\n   * the input.\n   * -@input     Set selection bounds of this input or textarea\n   * -@offsets   Object of same form that is returned from get*\n   */\n  setSelection: function (input, offsets) {\n    var start = offsets.start;\n    var end = offsets.end;\n    if (typeof end === 'undefined') {\n      end = start;\n    }\n\n    if ('selectionStart' in input) {\n      input.selectionStart = start;\n      input.selectionEnd = Math.min(end, input.value.length);\n    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {\n      var range = input.createTextRange();\n      range.collapse(true);\n      range.moveStart('character', start);\n      range.moveEnd('character', end - start);\n      range.select();\n    } else {\n      ReactDOMSelection.setOffsets(input, offsets);\n    }\n  }\n};\n\nmodule.exports = ReactInputSelection;"]}