{"version":3,"sources":["node_modules/react/lib/accumulateInto.js"],"names":["invariant","require","accumulateInto","current","next","process","env","NODE_ENV","undefined","currentIsArray","Array","isArray","nextIsArray","push","apply","concat","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAWA;;AAEA,IAAIA,YAAYC,QAAQ,oBAAR,CAAhB;;AAEA;;;;;;;;;;;;;;AAcA,SAASC,cAAT,CAAwBC,OAAxB,EAAiCC,IAAjC,EAAuC;AACrC,IAAEA,QAAQ,IAAV,IAAkBC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCP,UAAU,KAAV,EAAiB,uEAAjB,CAAxC,GAAoIA,UAAU,KAAV,CAAtJ,GAAyKQ,SAAzK;AACA,MAAIL,WAAW,IAAf,EAAqB;AACnB,WAAOC,IAAP;AACD;;AAED;AACA;AACA,MAAIK,iBAAiBC,MAAMC,OAAN,CAAcR,OAAd,CAArB;AACA,MAAIS,cAAcF,MAAMC,OAAN,CAAcP,IAAd,CAAlB;;AAEA,MAAIK,kBAAkBG,WAAtB,EAAmC;AACjCT,YAAQU,IAAR,CAAaC,KAAb,CAAmBX,OAAnB,EAA4BC,IAA5B;AACA,WAAOD,OAAP;AACD;;AAED,MAAIM,cAAJ,EAAoB;AAClBN,YAAQU,IAAR,CAAaT,IAAb;AACA,WAAOD,OAAP;AACD;;AAED,MAAIS,WAAJ,EAAiB;AACf;AACA,WAAO,CAACT,OAAD,EAAUY,MAAV,CAAiBX,IAAjB,CAAP;AACD;;AAED,SAAO,CAACD,OAAD,EAAUC,IAAV,CAAP;AACD;;AAEDY,OAAOC,OAAP,GAAiBf,cAAjB","file":"accumulateInto.js","sourceRoot":"/Users/mo/serverless-software","sourcesContent":["/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule accumulateInto\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n *\n * Accumulates items that must not be null or undefined into the first one. This\n * is used to conserve memory by avoiding array allocations, and thus sacrifices\n * API cleanness. Since `current` can be null before being passed in and not\n * null after this function, make sure to assign it back to `current`:\n *\n * `a = accumulateInto(a, b);`\n *\n * This API should be sparingly used. Try `accumulate` for something cleaner.\n *\n * @return {*|array<*>} An accumulation of items.\n */\n\nfunction accumulateInto(current, next) {\n  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;\n  if (current == null) {\n    return next;\n  }\n\n  // Both are not empty. Warning: Never call x.concat(y) when you are not\n  // certain that x is an Array (x could be a string with concat method).\n  var currentIsArray = Array.isArray(current);\n  var nextIsArray = Array.isArray(next);\n\n  if (currentIsArray && nextIsArray) {\n    current.push.apply(current, next);\n    return current;\n  }\n\n  if (currentIsArray) {\n    current.push(next);\n    return current;\n  }\n\n  if (nextIsArray) {\n    // A bit too dangerous to mutate `next`.\n    return [current].concat(next);\n  }\n\n  return [current, next];\n}\n\nmodule.exports = accumulateInto;"]}