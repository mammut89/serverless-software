{"version":3,"sources":["node_modules/react/lib/ReactDefaultPerfAnalysis.js"],"names":["assign","require","DONT_CARE_THRESHOLD","DOM_OPERATION_TYPES","INSERT_MARKUP","MOVE_EXISTING","REMOVE_NODE","SET_MARKUP","TEXT_CONTENT","getTotalTime","measurements","totalTime","i","length","measurement","getDOMSummary","items","forEach","Object","keys","writes","id","write","push","type","args","getExclusiveSummary","candidates","displayName","allIDs","exclusive","inclusive","displayNames","current","componentName","render","count","counts","arr","sort","a","b","getInclusiveSummary","onlyClean","inclusiveKey","cleanComponents","getUnchangedComponents","owner","time","dirtyLeafIDs","isDirty","indexOf","created","ReactDefaultPerfAnalysis","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAWA;;AAEA,IAAIA,SAASC,QAAQ,iBAAR,CAAb;;AAEA;AACA,IAAIC,sBAAsB,GAA1B;AACA,IAAIC,sBAAsB;AACxB,yBAAuB,eADC;AAExBC,iBAAe,eAFS;AAGxBC,iBAAe,MAHS;AAIxBC,eAAa,QAJW;AAKxBC,cAAY,eALY;AAMxBC,gBAAc,iBANU;AAOxB,yBAAuB,kBAPC;AAQxB,0BAAwB,kBARA;AASxB,4BAA0B,kBATF;AAUxB,uBAAqB,eAVG;AAWxB,2BAAyB,SAXD;AAYxB,uBAAqB;AAZG,CAA1B;;AAeA,SAASC,YAAT,CAAsBC,YAAtB,EAAoC;AAClC;AACA;AACA;AACA;AACA,MAAIC,YAAY,CAAhB;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,aAAaG,MAAjC,EAAyCD,GAAzC,EAA8C;AAC5C,QAAIE,cAAcJ,aAAaE,CAAb,CAAlB;AACAD,iBAAaG,YAAYH,SAAzB;AACD;AACD,SAAOA,SAAP;AACD;;AAED,SAASI,aAAT,CAAuBL,YAAvB,EAAqC;AACnC,MAAIM,QAAQ,EAAZ;AACAN,eAAaO,OAAb,CAAqB,UAAUH,WAAV,EAAuB;AAC1CI,WAAOC,IAAP,CAAYL,YAAYM,MAAxB,EAAgCH,OAAhC,CAAwC,UAAUI,EAAV,EAAc;AACpDP,kBAAYM,MAAZ,CAAmBC,EAAnB,EAAuBJ,OAAvB,CAA+B,UAAUK,KAAV,EAAiB;AAC9CN,cAAMO,IAAN,CAAW;AACTF,cAAIA,EADK;AAETG,gBAAMrB,oBAAoBmB,MAAME,IAA1B,KAAmCF,MAAME,IAFtC;AAGTC,gBAAMH,MAAMG;AAHH,SAAX;AAKD,OAND;AAOD,KARD;AASD,GAVD;AAWA,SAAOT,KAAP;AACD;;AAED,SAASU,mBAAT,CAA6BhB,YAA7B,EAA2C;AACzC,MAAIiB,aAAa,EAAjB;AACA,MAAIC,WAAJ;;AAEA,OAAK,IAAIhB,IAAI,CAAb,EAAgBA,IAAIF,aAAaG,MAAjC,EAAyCD,GAAzC,EAA8C;AAC5C,QAAIE,cAAcJ,aAAaE,CAAb,CAAlB;AACA,QAAIiB,SAAS7B,OAAO,EAAP,EAAWc,YAAYgB,SAAvB,EAAkChB,YAAYiB,SAA9C,CAAb;;AAEA,SAAK,IAAIV,EAAT,IAAeQ,MAAf,EAAuB;AACrBD,oBAAcd,YAAYkB,YAAZ,CAAyBX,EAAzB,EAA6BY,OAA3C;;AAEAN,iBAAWC,WAAX,IAA0BD,WAAWC,WAAX,KAA2B;AACnDM,uBAAeN,WADoC;AAEnDG,mBAAW,CAFwC;AAGnDD,mBAAW,CAHwC;AAInDK,gBAAQ,CAJ2C;AAKnDC,eAAO;AAL4C,OAArD;AAOA,UAAItB,YAAYqB,MAAZ,CAAmBd,EAAnB,CAAJ,EAA4B;AAC1BM,mBAAWC,WAAX,EAAwBO,MAAxB,IAAkCrB,YAAYqB,MAAZ,CAAmBd,EAAnB,CAAlC;AACD;AACD,UAAIP,YAAYgB,SAAZ,CAAsBT,EAAtB,CAAJ,EAA+B;AAC7BM,mBAAWC,WAAX,EAAwBE,SAAxB,IAAqChB,YAAYgB,SAAZ,CAAsBT,EAAtB,CAArC;AACD;AACD,UAAIP,YAAYiB,SAAZ,CAAsBV,EAAtB,CAAJ,EAA+B;AAC7BM,mBAAWC,WAAX,EAAwBG,SAAxB,IAAqCjB,YAAYiB,SAAZ,CAAsBV,EAAtB,CAArC;AACD;AACD,UAAIP,YAAYuB,MAAZ,CAAmBhB,EAAnB,CAAJ,EAA4B;AAC1BM,mBAAWC,WAAX,EAAwBQ,KAAxB,IAAiCtB,YAAYuB,MAAZ,CAAmBhB,EAAnB,CAAjC;AACD;AACF;AACF;;AAED;AACA,MAAIiB,MAAM,EAAV;AACA,OAAKV,WAAL,IAAoBD,UAApB,EAAgC;AAC9B,QAAIA,WAAWC,WAAX,EAAwBE,SAAxB,IAAqC5B,mBAAzC,EAA8D;AAC5DoC,UAAIf,IAAJ,CAASI,WAAWC,WAAX,CAAT;AACD;AACF;;AAEDU,MAAIC,IAAJ,CAAS,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACvB,WAAOA,EAAEX,SAAF,GAAcU,EAAEV,SAAvB;AACD,GAFD;;AAIA,SAAOQ,GAAP;AACD;;AAED,SAASI,mBAAT,CAA6BhC,YAA7B,EAA2CiC,SAA3C,EAAsD;AACpD,MAAIhB,aAAa,EAAjB;AACA,MAAIiB,YAAJ;;AAEA,OAAK,IAAIhC,IAAI,CAAb,EAAgBA,IAAIF,aAAaG,MAAjC,EAAyCD,GAAzC,EAA8C;AAC5C,QAAIE,cAAcJ,aAAaE,CAAb,CAAlB;AACA,QAAIiB,SAAS7B,OAAO,EAAP,EAAWc,YAAYgB,SAAvB,EAAkChB,YAAYiB,SAA9C,CAAb;AACA,QAAIc,eAAJ;;AAEA,QAAIF,SAAJ,EAAe;AACbE,wBAAkBC,uBAAuBhC,WAAvB,CAAlB;AACD;;AAED,SAAK,IAAIO,EAAT,IAAeQ,MAAf,EAAuB;AACrB,UAAIc,aAAa,CAACE,gBAAgBxB,EAAhB,CAAlB,EAAuC;AACrC;AACD;;AAED,UAAIO,cAAcd,YAAYkB,YAAZ,CAAyBX,EAAzB,CAAlB;;AAEA;AACA;AACA;AACAuB,qBAAehB,YAAYmB,KAAZ,GAAoB,KAApB,GAA4BnB,YAAYK,OAAvD;;AAEAN,iBAAWiB,YAAX,IAA2BjB,WAAWiB,YAAX,KAA4B;AACrDV,uBAAeU,YADsC;AAErDI,cAAM,CAF+C;AAGrDZ,eAAO;AAH8C,OAAvD;;AAMA,UAAItB,YAAYiB,SAAZ,CAAsBV,EAAtB,CAAJ,EAA+B;AAC7BM,mBAAWiB,YAAX,EAAyBI,IAAzB,IAAiClC,YAAYiB,SAAZ,CAAsBV,EAAtB,CAAjC;AACD;AACD,UAAIP,YAAYuB,MAAZ,CAAmBhB,EAAnB,CAAJ,EAA4B;AAC1BM,mBAAWiB,YAAX,EAAyBR,KAAzB,IAAkCtB,YAAYuB,MAAZ,CAAmBhB,EAAnB,CAAlC;AACD;AACF;AACF;;AAED;AACA,MAAIiB,MAAM,EAAV;AACA,OAAKM,YAAL,IAAqBjB,UAArB,EAAiC;AAC/B,QAAIA,WAAWiB,YAAX,EAAyBI,IAAzB,IAAiC9C,mBAArC,EAA0D;AACxDoC,UAAIf,IAAJ,CAASI,WAAWiB,YAAX,CAAT;AACD;AACF;;AAEDN,MAAIC,IAAJ,CAAS,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACvB,WAAOA,EAAEO,IAAF,GAASR,EAAEQ,IAAlB;AACD,GAFD;;AAIA,SAAOV,GAAP;AACD;;AAED,SAASQ,sBAAT,CAAgChC,WAAhC,EAA6C;AAC3C;AACA;AACA;AACA,MAAI+B,kBAAkB,EAAtB;AACA,MAAII,eAAe/B,OAAOC,IAAP,CAAYL,YAAYM,MAAxB,CAAnB;AACA,MAAIS,SAAS7B,OAAO,EAAP,EAAWc,YAAYgB,SAAvB,EAAkChB,YAAYiB,SAA9C,CAAb;;AAEA,OAAK,IAAIV,EAAT,IAAeQ,MAAf,EAAuB;AACrB,QAAIqB,UAAU,KAAd;AACA;AACA;AACA,SAAK,IAAItC,IAAI,CAAb,EAAgBA,IAAIqC,aAAapC,MAAjC,EAAyCD,GAAzC,EAA8C;AAC5C,UAAIqC,aAAarC,CAAb,EAAgBuC,OAAhB,CAAwB9B,EAAxB,MAAgC,CAApC,EAAuC;AACrC6B,kBAAU,IAAV;AACA;AACD;AACF;AACD;AACA,QAAIpC,YAAYsC,OAAZ,CAAoB/B,EAApB,CAAJ,EAA6B;AAC3B6B,gBAAU,IAAV;AACD;AACD,QAAI,CAACA,OAAD,IAAYpC,YAAYuB,MAAZ,CAAmBhB,EAAnB,IAAyB,CAAzC,EAA4C;AAC1CwB,sBAAgBxB,EAAhB,IAAsB,IAAtB;AACD;AACF;AACD,SAAOwB,eAAP;AACD;;AAED,IAAIQ,2BAA2B;AAC7B3B,uBAAqBA,mBADQ;AAE7BgB,uBAAqBA,mBAFQ;AAG7B3B,iBAAeA,aAHc;AAI7BN,gBAAcA;AAJe,CAA/B;;AAOA6C,OAAOC,OAAP,GAAiBF,wBAAjB","file":"ReactDefaultPerfAnalysis.js","sourceRoot":"/Users/mo/serverless-software","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultPerfAnalysis\n */\n\n'use strict';\n\nvar assign = require('./Object.assign');\n\n// Don't try to save users less than 1.2ms (a number I made up)\nvar DONT_CARE_THRESHOLD = 1.2;\nvar DOM_OPERATION_TYPES = {\n  '_mountImageIntoNode': 'set innerHTML',\n  INSERT_MARKUP: 'set innerHTML',\n  MOVE_EXISTING: 'move',\n  REMOVE_NODE: 'remove',\n  SET_MARKUP: 'set innerHTML',\n  TEXT_CONTENT: 'set textContent',\n  'setValueForProperty': 'update attribute',\n  'setValueForAttribute': 'update attribute',\n  'deleteValueForProperty': 'remove attribute',\n  'setValueForStyles': 'update styles',\n  'replaceNodeWithMarkup': 'replace',\n  'updateTextContent': 'set textContent'\n};\n\nfunction getTotalTime(measurements) {\n  // TODO: return number of DOM ops? could be misleading.\n  // TODO: measure dropped frames after reconcile?\n  // TODO: log total time of each reconcile and the top-level component\n  // class that triggered it.\n  var totalTime = 0;\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    totalTime += measurement.totalTime;\n  }\n  return totalTime;\n}\n\nfunction getDOMSummary(measurements) {\n  var items = [];\n  measurements.forEach(function (measurement) {\n    Object.keys(measurement.writes).forEach(function (id) {\n      measurement.writes[id].forEach(function (write) {\n        items.push({\n          id: id,\n          type: DOM_OPERATION_TYPES[write.type] || write.type,\n          args: write.args\n        });\n      });\n    });\n  });\n  return items;\n}\n\nfunction getExclusiveSummary(measurements) {\n  var candidates = {};\n  var displayName;\n\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);\n\n    for (var id in allIDs) {\n      displayName = measurement.displayNames[id].current;\n\n      candidates[displayName] = candidates[displayName] || {\n        componentName: displayName,\n        inclusive: 0,\n        exclusive: 0,\n        render: 0,\n        count: 0\n      };\n      if (measurement.render[id]) {\n        candidates[displayName].render += measurement.render[id];\n      }\n      if (measurement.exclusive[id]) {\n        candidates[displayName].exclusive += measurement.exclusive[id];\n      }\n      if (measurement.inclusive[id]) {\n        candidates[displayName].inclusive += measurement.inclusive[id];\n      }\n      if (measurement.counts[id]) {\n        candidates[displayName].count += measurement.counts[id];\n      }\n    }\n  }\n\n  // Now make a sorted array with the results.\n  var arr = [];\n  for (displayName in candidates) {\n    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {\n      arr.push(candidates[displayName]);\n    }\n  }\n\n  arr.sort(function (a, b) {\n    return b.exclusive - a.exclusive;\n  });\n\n  return arr;\n}\n\nfunction getInclusiveSummary(measurements, onlyClean) {\n  var candidates = {};\n  var inclusiveKey;\n\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);\n    var cleanComponents;\n\n    if (onlyClean) {\n      cleanComponents = getUnchangedComponents(measurement);\n    }\n\n    for (var id in allIDs) {\n      if (onlyClean && !cleanComponents[id]) {\n        continue;\n      }\n\n      var displayName = measurement.displayNames[id];\n\n      // Inclusive time is not useful for many components without knowing where\n      // they are instantiated. So we aggregate inclusive time with both the\n      // owner and current displayName as the key.\n      inclusiveKey = displayName.owner + ' > ' + displayName.current;\n\n      candidates[inclusiveKey] = candidates[inclusiveKey] || {\n        componentName: inclusiveKey,\n        time: 0,\n        count: 0\n      };\n\n      if (measurement.inclusive[id]) {\n        candidates[inclusiveKey].time += measurement.inclusive[id];\n      }\n      if (measurement.counts[id]) {\n        candidates[inclusiveKey].count += measurement.counts[id];\n      }\n    }\n  }\n\n  // Now make a sorted array with the results.\n  var arr = [];\n  for (inclusiveKey in candidates) {\n    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {\n      arr.push(candidates[inclusiveKey]);\n    }\n  }\n\n  arr.sort(function (a, b) {\n    return b.time - a.time;\n  });\n\n  return arr;\n}\n\nfunction getUnchangedComponents(measurement) {\n  // For a given reconcile, look at which components did not actually\n  // render anything to the DOM and return a mapping of their ID to\n  // the amount of time it took to render the entire subtree.\n  var cleanComponents = {};\n  var dirtyLeafIDs = Object.keys(measurement.writes);\n  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);\n\n  for (var id in allIDs) {\n    var isDirty = false;\n    // For each component that rendered, see if a component that triggered\n    // a DOM op is in its subtree.\n    for (var i = 0; i < dirtyLeafIDs.length; i++) {\n      if (dirtyLeafIDs[i].indexOf(id) === 0) {\n        isDirty = true;\n        break;\n      }\n    }\n    // check if component newly created\n    if (measurement.created[id]) {\n      isDirty = true;\n    }\n    if (!isDirty && measurement.counts[id] > 0) {\n      cleanComponents[id] = true;\n    }\n  }\n  return cleanComponents;\n}\n\nvar ReactDefaultPerfAnalysis = {\n  getExclusiveSummary: getExclusiveSummary,\n  getInclusiveSummary: getInclusiveSummary,\n  getDOMSummary: getDOMSummary,\n  getTotalTime: getTotalTime\n};\n\nmodule.exports = ReactDefaultPerfAnalysis;"]}