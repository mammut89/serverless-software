{"version":3,"sources":["node_modules/react/lib/ReactComponentEnvironment.js"],"names":["invariant","require","injected","ReactComponentEnvironment","unmountIDFromEnvironment","replaceNodeWithMarkupByID","processChildrenUpdates","injection","injectEnvironment","environment","process","env","NODE_ENV","undefined","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAWA;;AAEA,IAAIA,YAAYC,QAAQ,oBAAR,CAAhB;;AAEA,IAAIC,WAAW,KAAf;;AAEA,IAAIC,4BAA4B;;AAE9B;;;;;AAKAC,4BAA0B,IAPI;;AAS9B;;;;AAIAC,6BAA2B,IAbG;;AAe9B;;;;AAIAC,0BAAwB,IAnBM;;AAqB9BC,aAAW;AACTC,uBAAmB,2BAAUC,WAAV,EAAuB;AACxC,OAAC,CAACP,QAAF,GAAaQ,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCZ,UAAU,KAAV,EAAiB,uEAAjB,CAAxC,GAAoIA,UAAU,KAAV,CAAjJ,GAAoKa,SAApK;AACAV,gCAA0BC,wBAA1B,GAAqDK,YAAYL,wBAAjE;AACAD,gCAA0BE,yBAA1B,GAAsDI,YAAYJ,yBAAlE;AACAF,gCAA0BG,sBAA1B,GAAmDG,YAAYH,sBAA/D;AACAJ,iBAAW,IAAX;AACD;AAPQ;;AArBmB,CAAhC;;AAiCAY,OAAOC,OAAP,GAAiBZ,yBAAjB","file":"ReactComponentEnvironment.js","sourceRoot":"/Users/mo/serverless-software","sourcesContent":["/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponentEnvironment\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar injected = false;\n\nvar ReactComponentEnvironment = {\n\n  /**\n   * Optionally injectable environment dependent cleanup hook. (server vs.\n   * browser etc). Example: A browser system caches DOM nodes based on component\n   * ID and must remove that cache entry when this instance is unmounted.\n   */\n  unmountIDFromEnvironment: null,\n\n  /**\n   * Optionally injectable hook for swapping out mount images in the middle of\n   * the tree.\n   */\n  replaceNodeWithMarkupByID: null,\n\n  /**\n   * Optionally injectable hook for processing a queue of child updates. Will\n   * later move into MultiChildComponents.\n   */\n  processChildrenUpdates: null,\n\n  injection: {\n    injectEnvironment: function (environment) {\n      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;\n      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;\n      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;\n      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;\n      injected = true;\n    }\n  }\n\n};\n\nmodule.exports = ReactComponentEnvironment;"]}